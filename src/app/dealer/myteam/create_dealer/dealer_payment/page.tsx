'use client';

import React, { useState, useEffect } from 'react';
import Image from 'next/image';
import { useRouter, useSearchParams } from 'next/navigation';
import { 
  ArrowLeft, Loader2, CheckCircle2, XCircle, AlertCircle, 
  Copy, Check, QrCode, ExternalLink, Award, Phone
} from 'lucide-react';
import MoreHeaderDE from '@/components/header/MoreHeaderDE';
import { supabase } from '@/lib/supabase/client';

type PaymentMethod = 'qr' | 'link';

const SuccessModal = ({ isOpen, onClose, dealerName }: any) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-2xl p-8 max-w-md w-full text-center">
        <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
          <CheckCircle2 className="w-10 h-10 text-green-600" />
        </div>
        <h3 className="text-2xl font-bold text-gray-900 mb-3">–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! üéâ</h3>
        <p className="text-gray-600 mb-2">{dealerName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É</p>
        <p className="text-sm text-gray-500 mb-6">
          –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–∞
        </p>
        <button
          onClick={onClose}
          className="w-full bg-[#D77E6C] hover:bg-[#C66B5A] text-white py-3 rounded-xl font-medium transition-colors"
        >
          –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ
        </button>
      </div>
    </div>
  );
};

export default function DealerPaymentPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  
  const dealerId = searchParams.get('dealer_id');
  const sponsorId = searchParams.get('sponsor_id');
  
  const [dealerInfo, setDealerInfo] = useState<any>(null);
  const [sponsorChain, setSponsorChain] = useState<any[]>([]);
  const [paymentMethod, setPaymentMethod] = useState<PaymentMethod>('qr');
  const [paymentStep, setPaymentStep] = useState<'initial' | 'waiting' | 'confirm' | 'declined'>('initial');
  const [paymentNotes, setPaymentNotes] = useState('');
  const [declineReason, setDeclineReason] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState('');
  const [copied, setCopied] = useState(false);
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [showBonuses, setShowBonuses] = useState(false);

  const SUBSCRIPTION_AMOUNT = 100000;
  const KASPI_LINK = 'https://pay.kaspi.kz/pay/lafnp2v5';

  useEffect(() => {
    if (dealerId && sponsorId) {
      loadData();
    } else {
      setError('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
    }
  }, [dealerId, sponsorId]);

  const loadData = async () => {
    try {
      setIsLoading(true);
      
      const { data: dealer } = await supabase
        .from('users')
        .select('*')
        .eq('id', dealerId)
        .single();

      if (dealer) {
        setDealerInfo(dealer);
      } else {
        setError('–î–∏–ª–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      await loadSponsorChain();
    } catch (err) {
      console.error('Error loading data:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setIsLoading(false);
    }
  };

  const loadSponsorChain = async () => {
    try {
      if (!dealerId) return;
      
      const sponsors = [];
      let currentUserId = dealerId;
      
      for (let level = 1; level <= 3; level++) {
        const { data: user } = await supabase
          .from('users')
          .select('*')
          .eq('id', currentUserId)
          .single();
        
        if (!user?.parent_id) break;
        
        const { data: parent } = await supabase
          .from('users')
          .select('*')
          .eq('id', user.parent_id)
          .single();
        
        if (parent) {
          sponsors.push({
            level_num: level,
            user_id: parent.id,
            full_name: `${parent.first_name || ''} ${parent.last_name || ''}`.trim(),
            email: parent.email,
            phone: parent.phone,
            bonus: level === 1 ? 25000 : 3000,
            percent: level === 1 ? 25 : 3
          });
          currentUserId = parent.id;
        }
      }
      
      setSponsorChain(sponsors);
    } catch (err) {
      console.error('Error loading sponsor chain:', err);
    }
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(KASPI_LINK);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const handlePaymentConfirmed = async () => {
    if (!paymentNotes.trim()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ');
      return;
    }

    setIsSubmitting(true);
    setError('');

    try {
      // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–ª–µ—Ä–∞ –Ω–∞ paid (–æ–ø–ª–∞—á–µ–Ω–æ, –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
      const { error: updateError } = await supabase
        .from('users')
        .update({ status: 'paid' })
        .eq('id', dealerId);

      if (updateError) throw updateError;

      // 2. –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending
      const { error: paymentError } = await supabase
        .from('subscription_payments')
        .insert({
          user_id: dealerId,
          parent_id: sponsorId,
          amount: SUBSCRIPTION_AMOUNT,
          method: 'kaspi',
          status: 'pending',
          paid_at: new Date().toISOString(),
          notes: paymentNotes.trim()
        });

      if (paymentError) throw paymentError;

      setShowSuccessModal(true);

    } catch (err: any) {
      console.error('Error confirming payment:', err);
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handlePaymentDeclined = async () => {
    if (!declineReason.trim()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞');
      return;
    }

    setIsSubmitting(true);
    setError('');

    try {
      // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∏–ª–µ—Ä–∞ –Ω–∞ not_paid (–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ)
      const { error: updateError } = await supabase
        .from('users')
        .update({ status: 'not_paid' })
        .eq('id', dealerId);

      if (updateError) throw updateError;

      // 2. –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ–± –æ—Ç–∫–∞–∑–µ –æ—Ç –æ–ø–ª–∞—Ç—ã
      const { error: paymentError } = await supabase
        .from('subscription_payments')
        .insert({
          user_id: dealerId,
          parent_id: sponsorId,
          amount: SUBSCRIPTION_AMOUNT,
          method: 'kaspi',
          status: 'cancelled',
          paid_at: new Date().toISOString(),
          notes: `–û—Ç–∫–∞–∑ –æ—Ç –æ–ø–ª–∞—Ç—ã: ${declineReason.trim()}`
        });

      if (paymentError) throw paymentError;

      // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–º–∞–Ω–¥—ã
      router.push('/dealer/myteam');

    } catch (err: any) {
      console.error('Error declining payment:', err);
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-[#F6F6F6]">
        <Loader2 className="w-8 h-8 animate-spin text-[#D77E6C]" />
      </div>
    );
  }

  if (error && !dealerInfo) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-[#F6F6F6] p-4">
        <div className="bg-white rounded-3xl shadow-xl p-8 max-w-md w-full text-center">
          <div className="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <XCircle className="w-10 h-10 text-red-600" />
          </div>
          <h1 className="text-2xl font-bold text-gray-900 mb-3">–û—à–∏–±–∫–∞</h1>
          <p className="text-gray-600 mb-6">{error}</p>
          <button
            onClick={() => router.push('/dealer/myteam')}
            className="px-6 py-3 bg-[#D77E6C] text-white rounded-xl hover:bg-[#C66B5A] transition font-medium"
          >
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col p-2 md:p-6 bg-[#F6F6F6] min-h-screen">
      <MoreHeaderDE title="–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–∏–ª–µ—Ä–∞" />

      <div className="w-full mx-auto mt-6">
        <div className="bg-white rounded-3xl shadow-xl p-4 md:p-10">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
              <div className="text-center mb-8">
                <div className="w-20 h-20 bg-gradient-to-br from-[#D77E6C] to-[#E89185] rounded-full flex items-center justify-center mx-auto mb-4">
                  <Image src="/icons/IconAppsOrange.svg" width={40} height={40} alt="payment" className="brightness-0 invert" />
                </div>
                <h1 className="text-2xl md:text-3xl font-bold text-gray-900 mb-2">
                  –û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–∏–ª–µ—Ä–∞
                </h1>
                <p className="text-gray-600">–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π</p>
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏–ª–µ—Ä–µ */}
              {dealerInfo && (
                <div className="bg-gradient-to-r from-orange-50 to-pink-50 rounded-2xl p-6 mb-8">
                  <h3 className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
                    <CheckCircle2 className="w-5 h-5 text-green-600" />
                    –î–∏–ª–µ—Ä —Å–æ–∑–¥–∞–Ω
                  </h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 text-sm">
                    <div>
                      <span className="text-gray-600">–ò–º—è:</span>
                      <span className="ml-2 font-medium text-gray-900">
                        {dealerInfo.first_name} {dealerInfo.last_name}
                      </span>
                    </div>
                    <div>
                      <span className="text-gray-600">Email:</span>
                      <span className="ml-2 font-medium text-gray-900">{dealerInfo.email}</span>
                    </div>
                    <div>
                      <span className="text-gray-600">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                      <span className="ml-2 font-medium text-gray-900">{dealerInfo.phone}</span>
                    </div>
                    <div>
                      <span className="text-gray-600">–†–µ–≥–∏–æ–Ω:</span>
                      <span className="ml-2 font-medium text-gray-900">{dealerInfo.region}</span>
                    </div>
                  </div>
                </div>
              )}

              {/* –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞ –Ω–∞ initial –∏ waiting */}
              {(paymentStep === 'initial' || paymentStep === 'waiting') && (
                <div className="bg-gradient-to-br from-gray-50 to-white border-2 border-gray-200 rounded-2xl p-6 mb-8">
                  <h3 className="font-bold text-xl text-gray-900 mb-4">–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ</h3>
                  <div className="flex items-baseline gap-2 mb-6">
                    <span className="text-5xl font-bold text-[#D77E6C]">
                      {SUBSCRIPTION_AMOUNT.toLocaleString()}
                    </span>
                    <span className="text-2xl text-gray-600">‚Ç∏</span>
                  </div>
                </div>
              )}

              {/* –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞ –Ω–∞ initial –∏ waiting */}
              {(paymentStep === 'initial' || paymentStep === 'waiting') && (
                <div className="mb-8">
                  <h3 className="font-semibold text-gray-900 mb-4">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h3>
                  <div className="grid grid-cols-2 gap-3 md:gap-4">
                      {/* QR Code */}
                      <button
                        onClick={() => setPaymentMethod('qr')}
                        className={`p-3 md:p-6 rounded-xl md:rounded-2xl border-2 transition-all ${
                          paymentMethod === 'qr'
                            ? 'border-[#D77E6C] bg-orange-50'
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <QrCode className={`w-6 h-6 md:w-8 md:h-8 mx-auto mb-2 md:mb-3 ${
                          paymentMethod === 'qr' ? 'text-[#D77E6C]' : 'text-gray-400'
                        }`} />
                        <p className="font-semibold text-gray-900 text-sm md:text-base mb-1">–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR</p>
                        <p className="text-xs text-gray-500 hidden md:block">–ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞</p>
                      </button>

                      {/* –°—Å—ã–ª–∫–∞ */}
                      <button
                        onClick={() => setPaymentMethod('link')}
                        className={`p-3 md:p-6 rounded-xl md:rounded-2xl border-2 transition-all ${
                          paymentMethod === 'link'
                            ? 'border-[#D77E6C] bg-orange-50'
                            : 'border-gray-200 hover:border-gray-300'
                        }`}
                      >
                        <ExternalLink className={`w-6 h-6 md:w-8 md:h-8 mx-auto mb-2 md:mb-3 ${
                          paymentMethod === 'link' ? 'text-[#D77E6C]' : 'text-gray-400'
                        }`} />
                        <p className="font-semibold text-gray-900 text-sm md:text-base mb-1">–û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É</p>
                        <p className="text-xs text-gray-500 hidden md:block">–í –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Kaspi</p>
                      </button>
                    </div>
                  </div>
              )}

              {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ */}
              {paymentMethod === 'qr' && (
                    <>
                      {paymentStep === 'initial' && (
                        <div className="bg-white border-2 border-gray-200 rounded-2xl p-6 mb-8 text-center">
                          <h4 className="font-semibold text-gray-900 mb-4">–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥</h4>
                          <div className="relative w-64 h-64 mx-auto mb-4 bg-gray-50 rounded-xl overflow-hidden">
                            <Image
                              src="/img/kaspi_qr.png"
                              alt="Kaspi QR Code"
                              fill
                              className="object-contain"
                            />
                          </div>
                          <p className="text-sm text-gray-600 mb-4">
                            –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Kaspi –∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã
                          </p>
                          <button
                            onClick={() => setPaymentStep('waiting')}
                            className="w-full px-6 py-3 bg-[#D77E6C] hover:bg-[#C66B5A] text-white rounded-xl font-medium transition"
                          >
                            –ù–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É ‚Üí
                          </button>
                        </div>
                      )}

                      {paymentStep === 'waiting' && (
                        <div className="bg-white border-2 border-blue-200 rounded-2xl p-6 mb-8">
                          <div className="text-center mb-6">
                            <div className="relative inline-flex items-center justify-center mb-4">
                              <div className="absolute w-20 h-20 bg-blue-100 rounded-full animate-ping opacity-75"></div>
                              <div className="relative w-20 h-20 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center">
                                <Loader2 className="w-10 h-10 text-white animate-spin" />
                              </div>
                            </div>
                            <h3 className="text-2xl font-bold text-gray-900 mb-2">
                              –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...
                            </h3>
                            <p className="text-gray-600">
                              –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Kaspi
                            </p>
                          </div>

                          <div className="bg-blue-50 rounded-xl p-4 border border-blue-200 mb-6">
                            <div className="flex items-start gap-3">
                              <div className="flex-shrink-0 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs font-bold mt-0.5">
                                !
                              </div>
                              <div className="text-sm text-blue-900">
                                <p className="font-medium mb-1">–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</p>
                                <p className="text-blue-700">–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª" –Ω–∏–∂–µ</p>
                              </div>
                            </div>
                          </div>

                          <button
                            onClick={() => setPaymentStep('confirm')}
                            className="w-full px-6 py-3 bg-green-500 hover:bg-green-600 text-white rounded-xl font-medium transition flex items-center justify-center gap-2"
                          >
                            <CheckCircle2 className="w-5 h-5" />
                            –Ø –æ–ø–ª–∞—Ç–∏–ª ‚Üí
                          </button>

                          <button
                            onClick={() => setPaymentStep('initial')}
                            className="w-full mt-3 px-6 py-3 text-sm text-gray-600 hover:text-gray-800 transition"
                          >
                            –ü–æ–∫–∞–∑–∞—Ç—å QR-–∫–æ–¥ —Å–Ω–æ–≤–∞
                          </button>
                        </div>
                      )}
                    </>
                  )}

                  {paymentMethod === 'link' && (
                    <>
                      {paymentStep === 'initial' && (
                        <div className="bg-white border-2 border-gray-200 rounded-2xl p-6 mb-8">
                          <h4 className="font-semibold text-gray-900 mb-4">–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã</h4>
                          <div className="flex gap-2 mb-4">
                            <input
                              type="text"
                              value={KASPI_LINK}
                              readOnly
                              className="flex-1 px-4 py-3 bg-gray-50 border border-gray-200 rounded-lg text-sm"
                            />
                            <button
                              onClick={copyToClipboard}
                              className="px-4 py-3 bg-gray-100 hover:bg-gray-200 rounded-lg transition"
                            >
                              {copied ? <Check className="w-5 h-5 text-green-600" /> : <Copy className="w-5 h-5 text-gray-600" />}
                            </button>
                          </div>
                          <button
                            onClick={() => {
                              window.open(KASPI_LINK, '_blank');
                              setPaymentStep('waiting');
                            }}
                            className="w-full px-6 py-3 bg-[#D77E6C] hover:bg-[#C66B5A] text-white rounded-xl font-medium transition flex items-center justify-center gap-2"
                          >
                            <ExternalLink className="w-5 h-5" />
                            –û—Ç–∫—Ä—ã—Ç—å Kaspi
                          </button>
                        </div>
                      )}

                      {paymentStep === 'waiting' && (
                        <div className="bg-white border-2 border-blue-200 rounded-2xl p-6 mb-8">
                          <div className="text-center mb-6">
                            <div className="relative inline-flex items-center justify-center mb-4">
                              <div className="absolute w-20 h-20 bg-blue-100 rounded-full animate-ping opacity-75"></div>
                              <div className="relative w-20 h-20 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full flex items-center justify-center">
                                <Loader2 className="w-10 h-10 text-white animate-spin" />
                              </div>
                            </div>
                            <h3 className="text-2xl font-bold text-gray-900 mb-2">
                              –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã...
                            </h3>
                            <p className="text-gray-600">
                              –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Kaspi
                            </p>
                          </div>

                          <div className="bg-blue-50 rounded-xl p-4 border border-blue-200 mb-6">
                            <div className="flex items-start gap-3">
                              <div className="flex-shrink-0 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs font-bold mt-0.5">
                                !
                              </div>
                              <div className="text-sm text-blue-900">
                                <p className="font-medium mb-1">–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</p>
                                <p className="text-blue-700">–í–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–Ø –æ–ø–ª–∞—Ç–∏–ª"</p>
                              </div>
                            </div>
                          </div>

                          <button
                            onClick={() => setPaymentStep('confirm')}
                            className="w-full px-6 py-3 bg-green-500 hover:bg-green-600 text-white rounded-xl font-medium transition flex items-center justify-center gap-2"
                          >
                            <CheckCircle2 className="w-5 h-5" />
                            –Ø –æ–ø–ª–∞—Ç–∏–ª ‚Üí
                          </button>

                          <button
                            onClick={() => setPaymentStep('initial')}
                            className="w-full mt-3 px-6 py-3 text-sm text-gray-600 hover:text-gray-800 transition"
                          >
                            –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞
                          </button>
                        </div>
                      )}
                    </>
                  )}

                  {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–∞–∑–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ initial –∏ waiting */}
                  {(paymentStep === 'initial' || paymentStep === 'waiting') && (
                    <button
                      onClick={() => setPaymentStep('declined')}
                      className="w-full px-6 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 rounded-xl font-medium transition flex items-center justify-center gap-2 mt-4"
                    >
                      <XCircle className="w-5 h-5" />
                      –ù–µ –æ–ø–ª–∞—Ç–∏–ª
                    </button>
                  )}

                  {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ - —Ç–æ–ª—å–∫–æ –Ω–∞ initial */}
                  {paymentStep === 'initial' && (
                    <>
                      <button
                        onClick={() => setShowBonuses(!showBonuses)}
                        className="w-full mt-4 px-6 py-3 bg-white border-2 border-gray-200 hover:border-[#D77E6C] text-gray-700 rounded-xl font-medium transition flex items-center justify-center gap-2"
                      >
                        <Award className="w-5 h-5" />
                        {showBonuses ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤
                      </button>

                      {/* –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ */}
                      {showBonuses && (
                        <div className="mt-6 space-y-3">
                          {sponsorChain.map((sponsor, index) => (
                            <div key={sponsor.user_id} className="bg-gradient-to-r from-orange-50 to-pink-50 rounded-xl p-4 border border-orange-100">
                              <div className="flex items-center justify-between mb-2">
                                <span className="text-xs font-medium text-[#D77E6C]">
                                  {index === 0 ? '–ü—Ä—è–º–æ–π —Å–ø–æ–Ω—Å–æ—Ä' : `–£—Ä–æ–≤–µ–Ω—å ${sponsor.level_num}`}
                                </span>
                                <span className="px-2 py-1 bg-[#D77E6C] text-white text-xs rounded-full font-bold">
                                  {sponsor.percent}%
                                </span>
                              </div>
                              <p className="text-xl font-bold text-gray-900 mb-2">
                                +{sponsor.bonus.toLocaleString()} ‚Ç∏
                              </p>
                              <p className="font-medium text-gray-900 text-sm">{sponsor.full_name}</p>
                              <p className="text-xs text-gray-500">{sponsor.email}</p>
                              {sponsor.phone && (
                                <div className="flex items-center gap-1 text-xs text-gray-500 mt-1">
                                  <Phone className="w-3 h-3" />
                                  {sponsor.phone}
                                </div>
                              )}
                            </div>
                          ))}

                          {sponsorChain.length === 0 && (
                            <div className="text-center py-8 bg-gray-50 rounded-xl">
                              <Award className="w-12 h-12 text-gray-300 mx-auto mb-2" />
                              <p className="text-sm text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ø–æ–Ω—Å–æ—Ä–∞—Ö</p>
                            </div>
                          )}
                        </div>
                      )}
                    </>
                  )}

              {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã */}
              {paymentStep === 'confirm' && (
                <div className="bg-white rounded-2xl border-2 border-green-200 p-6">
                  <div className="text-center mb-6">
                    <div className="inline-flex p-4 bg-green-50 rounded-full mb-4">
                      <CheckCircle2 className="w-12 h-12 text-green-600" />
                    </div>
                    <h3 className="text-2xl font-bold text-gray-900 mb-2">
                      –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
                    </h3>
                    <p className="text-gray-600">
                      –£–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–∏—Å—Ç–æ–º
                    </p>
                  </div>

                  <div className="bg-blue-50 rounded-xl p-4 border border-blue-200 mb-6">
                    <p className="text-sm text-blue-900 font-medium mb-2">–ß—Ç–æ —É–∫–∞–∑–∞—Ç—å:</p>
                    <ul className="text-sm text-gray-700 space-y-1 list-disc list-inside">
                      <li>–ò–º—è –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è</li>
                      <li>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞</li>
                      <li>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã</li>
                    </ul>
                  </div>

                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –î–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ *
                    </label>
                    <textarea
                      value={paymentNotes}
                      onChange={(e) => setPaymentNotes(e.target.value)}
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–ø–ª–∞—á–µ–Ω–æ –æ—Ç –ê–π–∂–∞–Ω, –Ω–æ–º–µ—Ä +7 777 123-4567, –≤—Ä–µ–º—è: 14:30"
                      className="w-full h-32 px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#D77E6C] resize-none"
                      maxLength={500}
                    />
                    <p className="text-xs text-gray-500 mt-1">{paymentNotes.length}/500</p>
                  </div>

                  {error && (
                    <div className="flex items-start gap-2 text-red-600 text-sm bg-red-50 rounded-lg p-3 mb-6">
                      <AlertCircle className="w-4 h-4 mt-0.5" />
                      {error}
                    </div>
                  )}

                  <div className="grid grid-cols-2 gap-3">
                    <button
                      onClick={() => setPaymentStep('initial')}
                      disabled={isSubmitting}
                      className="py-3 bg-gray-100 hover:bg-gray-200 disabled:opacity-50 text-gray-700 rounded-xl font-medium transition"
                    >
                      –ù–∞–∑–∞–¥
                    </button>
                    <button
                      onClick={handlePaymentConfirmed}
                      disabled={isSubmitting}
                      className="py-3 bg-green-500 hover:bg-green-600 disabled:bg-gray-400 text-white rounded-xl font-medium transition flex items-center justify-center gap-2"
                    >
                      {isSubmitting ? (
                        <>
                          <Loader2 className="w-5 h-5 animate-spin" />
                          –û–±—Ä–∞–±–æ—Ç–∫–∞...
                        </>
                      ) : (
                        <>
                          <CheckCircle2 className="w-5 h-5" />
                          –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                        </>
                      )}
                    </button>
                  </div>
                </div>
              )}

              {/* –û—Ç–∫–∞–∑ –æ—Ç –æ–ø–ª–∞—Ç—ã */}
              {paymentStep === 'declined' && (
                <div className="bg-white rounded-2xl border-2 border-red-200 p-6">
                  <div className="text-center mb-6">
                    <div className="inline-flex p-4 bg-red-50 rounded-full mb-4">
                      <XCircle className="w-12 h-12 text-red-600" />
                    </div>
                    <h3 className="text-2xl font-bold text-gray-900 mb-2">
                      –û–ø–ª–∞—Ç–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                    </h3>
                    <p className="text-gray-600">–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–∞–∑–∞</p>
                  </div>

                  <div className="mb-6">
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞ *
                    </label>
                    <textarea
                      value={declineReason}
                      onChange={(e) => setDeclineReason(e.target.value)}
                      placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å Kaspi, –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É, –ø–µ—Ä–µ–¥—É–º–∞–ª..."
                      className="w-full h-24 px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-red-500 resize-none"
                      maxLength={300}
                    />
                    <p className="text-xs text-gray-500 mt-1">{declineReason.length}/300</p>
                  </div>

                  {error && (
                    <div className="flex items-start gap-2 text-red-600 text-sm bg-red-50 rounded-lg p-3 mb-6">
                      <AlertCircle className="w-4 h-4 mt-0.5" />
                      {error}
                    </div>
                  )}

                  <div className="grid grid-cols-2 gap-3">
                    <button
                      onClick={() => setPaymentStep('initial')}
                      disabled={isSubmitting}
                      className="py-3 bg-gray-100 hover:bg-gray-200 disabled:opacity-50 text-gray-700 rounded-xl font-medium transition"
                    >
                      –ù–∞–∑–∞–¥
                    </button>
                    <button
                      onClick={handlePaymentDeclined}
                      disabled={isSubmitting}
                      className="py-3 bg-red-500 hover:bg-red-600 disabled:bg-gray-400 text-white rounded-xl font-medium transition flex items-center justify-center gap-2"
                    >
                      {isSubmitting ? (
                        <>
                          <Loader2 className="w-5 h-5 animate-spin" />
                          –û–±—Ä–∞–±–æ—Ç–∫–∞...
                        </>
                      ) : (
                        '–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É'
                      )}
                    </button>
                  </div>
                </div>
              )}
        </div>
      </div>

      <SuccessModal
        isOpen={showSuccessModal}
        onClose={() => router.push('/dealer/myteam')}
        dealerName={`${dealerInfo?.first_name} ${dealerInfo?.last_name}`}
      />
    </div>
  );
}