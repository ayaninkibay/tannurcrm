'use client';

import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { useUser } from '@/context/UserContext';
import { supabase } from '@/lib/supabase/client';
import { 
  Calendar, 
  Gift, 
  Target, 
  AlertCircle, 
  Plus, 
  X, 
  Save, 
  ArrowLeft,
  Image,
  Tag,
  Sparkles,
  FileText,
  Clock,
  Upload
} from 'lucide-react';
import type { CreateEventInput } from '@/types/custom.types';

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –±–µ–π–¥–∂–µ–π
const BADGE_COLORS = [
  '#DC7C67', // –≥–ª–∞–≤–Ω—ã–π —Ü–≤–µ—Ç –±—Ä–µ–Ω–¥–∞
  '#C86B56',
  '#B95F4A',
  '#3B82F6', // blue
  '#10B981', // green
  '#F59E0B', // yellow
  '#8B5CF6', // purple
  '#EC4899', // pink
];

// –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∏–∫–æ–Ω–∫–∏
const BADGE_ICONS = [
  'üéØ', 'üèÜ', 'üéÅ', 'üíé', 'üî•', '‚≠ê', 'üöÄ', 'üí∞', 
  'üéâ', 'üèÖ', '‚ú®', 'üåü', 'üí™', 'üéä', 'ü•á', 'üéà'
];

export default function CreateEventPage() {
  const router = useRouter();
  const { profile, loading: userLoading } = useUser();
  
  const [saving, setSaving] = useState(false);
  const [uploadingImage, setUploadingImage] = useState(false);
  const [uploadingBanner, setUploadingBanner] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  
  // Form state
  const [formData, setFormData] = useState<CreateEventInput>({
    title: '',
    short_description: '',
    description: '',
    start_date: '',
    end_date: '',
    goals: [],
    rewards: [],
    conditions: [],
    badge_color: BADGE_COLORS[0],
    badge_icon: BADGE_ICONS[4], // üî•
    priority: 0,
    is_featured: false,
    tags: [],
    status: 'draft',
    image_url: '',
    banner_url: '',
    gallery: []
  });

  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const [newGoal, setNewGoal] = useState('');
  const [newReward, setNewReward] = useState('');
  const [newCondition, setNewCondition] = useState('');
  const [newTag, setNewTag] = useState('');

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const uploadImage = async (file: File, type: 'main' | 'banner') => {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 10MB)
      if (file.size > 10 * 1024 * 1024) {
        throw new Error('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB');
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
      if (!file.type.startsWith('image/')) {
        throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
      const fileExt = file.name.split('.').pop();
      const fileName = `${Date.now()}_${Math.random().toString(36).substring(7)}.${fileExt}`;
      const filePath = type === 'main' 
        ? `events/${fileName}`
        : `events/banners/${fileName}`;

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Supabase Storage
      const { error: uploadError, data } = await supabase.storage
        .from('images')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false
        });

      if (uploadError) {
        console.error('Upload error:', uploadError);
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: { publicUrl } } = supabase.storage
        .from('images')
        .getPublicUrl(filePath);

      return publicUrl;
    } catch (err: any) {
      console.error('Error in uploadImage:', err);
      throw err;
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImageUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setUploadingImage(true);
    setError(null);

    try {
      const url = await uploadImage(file, 'main');
      setFormData(prev => ({ ...prev, image_url: url }));
    } catch (err: any) {
      setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    } finally {
      setUploadingImage(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–Ω–Ω–µ—Ä–∞
  const handleBannerUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    setUploadingBanner(true);
    setError(null);

    try {
      const url = await uploadImage(file, 'banner');
      setFormData(prev => ({ ...prev, banner_url: url }));
    } catch (err: any) {
      setError(err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–Ω–Ω–µ—Ä–∞');
    } finally {
      setUploadingBanner(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const removeImage = (type: 'main' | 'banner') => {
    if (type === 'main') {
      setFormData(prev => ({ ...prev, image_url: '' }));
    } else {
      setFormData(prev => ({ ...prev, banner_url: '' }));
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  React.useEffect(() => {
    if (!userLoading && !profile) {
      router.push('/signin');
    } else if (!userLoading && profile && profile.role !== 'admin') {
      setError('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π');
      setTimeout(() => {
        router.push('/');
      }, 3000);
    }
  }, [profile, userLoading, router]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  const handleSave = async (status: 'draft' | 'published' = 'draft') => {
    if (!profile) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
      router.push('/signin');
      return;
    }

    if (profile.role !== 'admin') {
      setError('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return;
    }

    if (!formData.title || !formData.start_date || !formData.end_date) {
      setError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è');
      return;
    }

    if (new Date(formData.start_date) > new Date(formData.end_date)) {
      setError('–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è');
      return;
    }

    setSaving(true);
    setError(null);

    try {
      const { error: insertError } = await supabase
        .from('events')
        .insert([{
          ...formData,
          status,
          created_by: profile.id
        }]);

      if (insertError) throw insertError;
      
      setSuccess(true);
      setTimeout(() => {
        router.push('/dealer/dashboard/events');
      }, 1500);
    } catch (err: any) {
      console.error('Error creating event:', err);
      
      if (err.code === '42501') {
        setError('–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.');
      } else if (err.message) {
        setError(err.message);
      } else {
        setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è');
      }
    } finally {
      setSaving(false);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤—ã
  const addArrayItem = (field: 'goals' | 'rewards' | 'conditions' | 'tags', value: string) => {
    if (value.trim()) {
      setFormData(prev => ({
        ...prev,
        [field]: [...(prev[field] || []), value.trim()]
      }));
      
      if (field === 'goals') setNewGoal('');
      if (field === 'rewards') setNewReward('');
      if (field === 'conditions') setNewCondition('');
      if (field === 'tags') setNewTag('');
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤
  const removeArrayItem = (field: 'goals' | 'rewards' | 'conditions' | 'tags', index: number) => {
    setFormData(prev => ({
      ...prev,
      [field]: (prev[field] || []).filter((_, i) => i !== index)
    }));
  };

  if (userLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#DC7C67]"></div>
      </div>
    );
  }

  if (!profile || profile.role !== 'admin') {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <AlertCircle className="h-16 w-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-semibold mb-2">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h2>
          <p className="text-gray-600">–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</p>
        </div>
      </div>
    );
  }

  return (
    <div className="w-full min-h-screen bg-gradient-to-b from-[#F8F1EF] to-white">
      {/* –®–∞–ø–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="sticky top-0 z-10 bg-gradient-to-r from-[#DC7C67] via-[#C86B56] to-[#B95F4A] shadow-sm">
        <div className="px-4 sm:px-6 lg:px-8 py-5">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Link
                href="/dealer/dashboard/events"
                className="flex items-center justify-center w-9 h-9 rounded-lg bg-white/15 border border-white/25 hover:bg-white/25 transition-colors"
              >
                <ArrowLeft className="w-4 h-4 text-white" />
              </Link>
              <div className="text-white">
                <h1 className="text-2xl font-semibold">–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è</h1>
                <p className="text-white/80 text-sm mt-0.5">–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏</p>
              </div>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
            <div className="flex items-center gap-3">
              <button
                onClick={() => handleSave('draft')}
                disabled={saving}
                className="px-4 py-2 bg-white/20 text-white rounded-lg hover:bg-white/30 transition-colors flex items-center gap-2 text-sm font-medium"
              >
                <FileText className="w-4 h-4" />
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
              </button>
              <button
                onClick={() => handleSave('published')}
                disabled={saving || !formData.title}
                className="px-4 py-2 bg-white text-[#C86B56] rounded-lg hover:bg-white/90 transition-colors flex items-center gap-2 text-sm font-medium shadow-sm"
              >
                {saving ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-[#C86B56]"></div>
                    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                  </>
                ) : (
                  <>
                    <Sparkles className="w-4 h-4" />
                    –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        {/* Success message */}
        {success && (
          <div className="mb-6 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-xl flex items-center gap-2">
            <div className="h-5 w-5">‚úì</div>
            –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...
          </div>
        )}

        {/* Error message */}
        {error && (
          <div className="mb-6 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-xl flex items-center gap-2">
            <AlertCircle className="h-5 w-5 flex-shrink-0" />
            {error}
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
          <div className="lg:col-span-2 space-y-6">
            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="bg-white rounded-2xl border border-gray-100 overflow-hidden">
              <div className="px-6 py-4 bg-gradient-to-r from-[#FFF7F5] to-[#FFF2F0] border-b border-gray-100">
                <h2 className="text-lg font-semibold text-[#B95F4A]">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
              </div>
              
              <div className="p-6 space-y-5">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è *
                  </label>
                  <input
                    type="text"
                    value={formData.title}
                    onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                    className="w-full px-4 py-2.5 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#DC7C67] focus:border-transparent outline-none transition-all"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–≤–≥—É—Å—Ç - –º–µ—Å—è—Ü —Ä–µ–∫–æ—Ä–¥–æ–≤!"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                  </label>
                  <input
                    type="text"
                    value={formData.short_description || ''}
                    onChange={(e) => setFormData(prev => ({ ...prev, short_description: e.target.value }))}
                    className="w-full px-4 py-2.5 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#DC7C67] focus:border-transparent outline-none transition-all"
                    placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏"
                    maxLength={500}
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    {formData.short_description?.length || 0}/500 —Å–∏–º–≤–æ–ª–æ–≤
                  </p>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                  </label>
                  <textarea
                    value={formData.description || ''}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-4 py-2.5 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#DC7C67] focus:border-transparent outline-none transition-all resize-none"
                    rows={5}
                    placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"
                  />
                </div>

                {/* –î–∞—Ç—ã */}
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      <Calendar className="inline w-4 h-4 mr-1" />
                      –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ *
                    </label>
                    <input
                      type="date"
                      value={formData.start_date}
                      onChange={(e) => setFormData(prev => ({ ...prev, start_date: e.target.value }))}
                      className="w-full px-4 py-2.5 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#DC7C67] focus:border-transparent outline-none transition-all"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      <Clock className="inline w-4 h-4 mr-1" />
                      –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è *
                    </label>
                    <input
                      type="date"
                      value={formData.end_date}
                      onChange={(e) => setFormData(prev => ({ ...prev, end_date: e.target.value }))}
                      min={formData.start_date}
                      className="w-full px-4 py-2.5 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#DC7C67] focus:border-transparent outline-none transition-all"
                    />
                  </div>
                </div>
              </div>
            </div>

            {/* –¶–µ–ª–∏ */}
            <div className="bg-white rounded-2xl border border-gray-100 overflow-hidden">
              <div className="px-6 py-4 bg-gradient-to-r from-[#EAF2FF] to-[#F0F6FF] border-b border-gray-100">
                <h2 className="text-lg font-semibold text-[#3366CC] flex items-center gap-2">
                  <Target className="w-5 h-5" />
                  –¶–µ–ª–∏ —Å–æ–±—ã—Ç–∏—è
                </h2>
              </div>
              
              <div className="p-6 space-y-3">
                {formData.goals && formData.goals.length > 0 && (
                  <div className="space-y-2">
                    {formData.goals.map((goal, index) => (
                      <div key={index} className="flex items-center gap-2 bg-blue-50 p-3 rounded-xl">
                        <span className="flex-shrink-0 w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs font-medium">
                          {index + 1}
                        </span>
                        <span className="flex-1 text-gray-800">{goal}</span>
                        <button
                          onClick={() => removeArrayItem('goals', index)}
                          className="text-gray-400 hover:text-red-500 transition-colors p-1"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      </div>
                    ))}
                  </div>
                )}
                
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={newGoal}
                    onChange={(e) => setNewGoal(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        e.preventDefault();
                        addArrayItem('goals', newGoal);
                      }
                    }}
                    className="flex-1 px-4 py-2.5 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–¥–µ–ª–∞—Ç—å 10 –ø—Ä–æ–¥–∞–∂"
                  />
                  <button
                    onClick={() => addArrayItem('goals', newGoal)}
                    className="px-4 py-2.5 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-colors flex items-center gap-2 whitespace-nowrap"
                  >
                    <Plus className="h-4 w-4" />
                    –î–æ–±–∞–≤–∏—Ç—å
                  </button>
                </div>
              </div>
            </div>

            {/* –ù–∞–≥—Ä–∞–¥—ã */}
            <div className="bg-white rounded-2xl border border-gray-100 overflow-hidden">
              <div className="px-6 py-4 bg-gradient-to-r from-[#F0FFF4] to-[#E6FFED] border-b border-gray-100">
                <h2 className="text-lg font-semibold text-green-700 flex items-center gap-2">
                  <Gift className="w-5 h-5" />
                  –ù–∞–≥—Ä–∞–¥—ã
                </h2>
              </div>
              
              <div className="p-6 space-y-3">
                {formData.rewards && formData.rewards.length > 0 && (
                  <div className="space-y-2">
                    {formData.rewards.map((reward, index) => (
                      <div key={index} className="flex items-center gap-2 bg-green-50 p-3 rounded-xl">
                        <span className="flex-shrink-0 text-2xl">üéÅ</span>
                        <span className="flex-1 text-gray-800">{reward}</span>
                        <button
                          onClick={() => removeArrayItem('rewards', index)}
                          className="text-gray-400 hover:text-red-500 transition-colors p-1"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      </div>
                    ))}
                  </div>
                )}
                
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={newReward}
                    onChange={(e) => setNewReward(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        e.preventDefault();
                        addArrayItem('rewards', newReward);
                      }
                    }}
                    className="flex-1 px-4 py-2.5 border border-gray-200 rounded-xl focus:ring-2 focus:ring-green-500 focus:border-transparent outline-none transition-all"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –®–∞–º–ø—É–Ω—å –≤ –ø–æ–¥–∞—Ä–æ–∫"
                  />
                  <button
                    onClick={() => addArrayItem('rewards', newReward)}
                    className="px-4 py-2.5 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-colors flex items-center gap-2 whitespace-nowrap"
                  >
                    <Plus className="h-4 w-4" />
                    –î–æ–±–∞–≤–∏—Ç—å
                  </button>
                </div>
              </div>
            </div>

            {/* –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è */}
            <div className="bg-white rounded-2xl border border-gray-100 overflow-hidden">
              <div className="px-6 py-4 bg-gradient-to-r from-[#FFFBEB] to-[#FEF3C7] border-b border-gray-100">
                <h2 className="text-lg font-semibold text-yellow-700 flex items-center gap-2">
                  <AlertCircle className="w-5 h-5" />
                  –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è
                </h2>
                <p className="text-sm text-gray-600 mt-1">–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ</p>
              </div>
              
              <div className="p-6 space-y-3">
                {formData.conditions && formData.conditions.length > 0 && (
                  <div className="space-y-2">
                    {formData.conditions.map((condition, index) => (
                      <div key={index} className="flex items-center gap-2 bg-yellow-50 p-3 rounded-xl">
                        <span className="text-yellow-500">‚ö†Ô∏è</span>
                        <span className="flex-1 text-gray-800">{condition}</span>
                        <button
                          onClick={() => removeArrayItem('conditions', index)}
                          className="text-gray-400 hover:text-red-500 transition-colors p-1"
                        >
                          <X className="h-4 w-4" />
                        </button>
                      </div>
                    ))}
                  </div>
                )}
                
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={newCondition}
                    onChange={(e) => setNewCondition(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        e.preventDefault();
                        addArrayItem('conditions', newCondition);
                      }
                    }}
                    className="flex-1 px-4 py-2.5 border border-gray-200 rounded-xl focus:ring-2 focus:ring-yellow-500 focus:border-transparent outline-none transition-all"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–ª—è –¥–∏–ª–µ—Ä–æ–≤ –æ—Ç 2 —É—Ä–æ–≤–Ω—è"
                  />
                  <button
                    onClick={() => addArrayItem('conditions', newCondition)}
                    className="px-4 py-2.5 bg-yellow-500 text-white rounded-xl hover:bg-yellow-600 transition-colors flex items-center gap-2 whitespace-nowrap"
                  >
                    <Plus className="h-4 w-4" />
                    –î–æ–±–∞–≤–∏—Ç—å
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
          <div className="space-y-6">
            {/* –í–∏–∑—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            <div className="bg-white rounded-2xl border border-gray-100 overflow-hidden">
              <div className="px-6 py-4 bg-gradient-to-r from-[#FFF7F5] to-[#FFF2F0] border-b border-gray-100">
                <h2 className="text-lg font-semibold text-[#B95F4A]">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ</h2>
              </div>
              
              <div className="p-6 space-y-5">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    –¶–≤–µ—Ç –±–µ–π–¥–∂–∞
                  </label>
                  <div className="grid grid-cols-4 gap-2">
                    {BADGE_COLORS.map((color) => (
                      <button
                        key={color}
                        onClick={() => setFormData(prev => ({ ...prev, badge_color: color }))}
                        className={`w-full aspect-square rounded-xl border-2 transition-all ${
                          formData.badge_color === color 
                            ? 'border-gray-900 scale-110 shadow-lg' 
                            : 'border-gray-200 hover:scale-105'
                        }`}
                        style={{ backgroundColor: color }}
                      />
                    ))}
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    –ò–∫–æ–Ω–∫–∞ —Å–æ–±—ã—Ç–∏—è
                  </label>
                  <div className="grid grid-cols-4 gap-2">
                    {BADGE_ICONS.map((icon) => (
                      <button
                        key={icon}
                        onClick={() => setFormData(prev => ({ ...prev, badge_icon: icon }))}
                        className={`w-full aspect-square rounded-xl border-2 flex items-center justify-center text-2xl transition-all ${
                          formData.badge_icon === icon 
                            ? 'border-[#DC7C67] bg-[#FFF7F5] scale-110' 
                            : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                        }`}
                      >
                        {icon}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            </div>

            {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
            <div className="bg-white rounded-2xl border border-gray-100 overflow-hidden">
              <div className="px-6 py-4 bg-gradient-to-r from-[#FFF7F5] to-[#FFF2F0] border-b border-gray-100">
                <h2 className="text-lg font-semibold text-[#B95F4A] flex items-center gap-2">
                  <Image className="w-5 h-5" />
                  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                </h2>
              </div>
              
              <div className="p-6 space-y-4">
                {/* –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                  </label>
                  
                  {!formData.image_url ? (
                    <label className="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-xl cursor-pointer bg-gray-50 hover:bg-gray-100 transition-colors">
                      <div className="flex flex-col items-center justify-center pt-5 pb-6">
                        {uploadingImage ? (
                          <>
                            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#DC7C67] mb-2"></div>
                            <p className="text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                          </>
                        ) : (
                          <>
                            <Upload className="w-8 h-8 mb-2 text-gray-400" />
                            <p className="mb-2 text-sm text-gray-500">
                              <span className="font-semibold">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏</span>
                            </p>
                            <p className="text-xs text-gray-500">PNG, JPG –¥–æ 10MB</p>
                          </>
                        )}
                      </div>
                      <input 
                        type="file" 
                        className="hidden" 
                        accept="image/*"
                        onChange={handleImageUpload}
                        disabled={uploadingImage}
                      />
                    </label>
                  ) : (
                    <div className="relative">
                      <img 
                        src={formData.image_url} 
                        alt="Preview" 
                        className="w-full h-32 object-cover rounded-xl"
                      />
                      <button
                        type="button"
                        onClick={() => removeImage('main')}
                        className="absolute top-2 right-2 p-1.5 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  )}
                </div>

                {/* –ë–∞–Ω–Ω–µ—Ä */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ë–∞–Ω–Ω–µ—Ä
                  </label>
                  
                  {!formData.banner_url ? (
                    <label className="flex flex-col items-center justify-center w-full h-32 border-2 border-gray-300 border-dashed rounded-xl cursor-pointer bg-gray-50 hover:bg-gray-100 transition-colors">
                      <div className="flex flex-col items-center justify-center pt-5 pb-6">
                        {uploadingBanner ? (
                          <>
                            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-[#DC7C67] mb-2"></div>
                            <p className="text-sm text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                          </>
                        ) : (
                          <>
                            <Upload className="w-8 h-8 mb-2 text-gray-400" />
                            <p className="mb-2 text-sm text-gray-500">
                              <span className="font-semibold">–ó–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–Ω–Ω–µ—Ä</span>
                            </p>
                            <p className="text-xs text-gray-500">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 1920x400</p>
                          </>
                        )}
                      </div>
                      <input 
                        type="file" 
                        className="hidden" 
                        accept="image/*"
                        onChange={handleBannerUpload}
                        disabled={uploadingBanner}
                      />
                    </label>
                  ) : (
                    <div className="relative">
                      <img 
                        src={formData.banner_url} 
                        alt="Banner Preview" 
                        className="w-full h-32 object-cover rounded-xl"
                      />
                      <button
                        type="button"
                        onClick={() => removeImage('banner')}
                        className="absolute top-2 right-2 p-1.5 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            <div className="bg-white rounded-2xl border border-gray-100 overflow-hidden">
              <div className="px-6 py-4 bg-gradient-to-r from-[#FFF7F5] to-[#FFF2F0] border-b border-gray-100">
                <h2 className="text-lg font-semibold text-[#B95F4A]">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h2>
              </div>
              
              <div className="p-6 space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                  </label>
                  <input
                    type="number"
                    value={formData.priority || 0}
                    onChange={(e) => setFormData(prev => ({ ...prev, priority: parseInt(e.target.value) || 0 }))}
                    className="w-full px-4 py-2.5 border border-gray-200 rounded-xl focus:ring-2 focus:ring-[#DC7C67] focus:border-transparent outline-none transition-all"
                    placeholder="0"
                  />
                  <p className="text-xs text-gray-500 mt-1">–ß–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ</p>
                </div>

                <label className="flex items-center gap-3 p-3 bg-[#FFF7F5] rounded-xl cursor-pointer hover:bg-[#FDEAE5] transition-colors">
                  <input
                    type="checkbox"
                    checked={formData.is_featured || false}
                    onChange={(e) => setFormData(prev => ({ ...prev, is_featured: e.target.checked }))}
                    className="w-4 h-4 text-[#DC7C67] rounded focus:ring-[#DC7C67]"
                  />
                  <div>
                    <span className="text-sm font-medium text-gray-700">–í—ã–¥–µ–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ</span>
                    <p className="text-xs text-gray-500">–ü–æ–∫–∞–∑–∞—Ç—å —Å –æ—Ç–º–µ—Ç–∫–æ–π "–ì–æ—Ä—è—á–µ–µ"</p>
                  </div>
                </label>

                {/* –¢–µ–≥–∏ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center gap-1">
                    <Tag className="h-4 w-4" />
                    –¢–µ–≥–∏
                  </label>
                  {formData.tags && formData.tags.length > 0 && (
                    <div className="flex flex-wrap gap-2 mb-3">
                      {formData.tags.map((tag, index) => (
                        <span key={index} className="inline-flex items-center gap-1 px-3 py-1 bg-gray-100 rounded-full text-sm">
                          #{tag}
                          <button
                            onClick={() => removeArrayItem('tags', index)}
                            className="text-gray-500 hover:text-red-500 transition-colors"
                          >
                            <X className="h-3 w-3" />
                          </button>
                        </span>
                      ))}
                    </div>
                  )}
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={newTag}
                      onChange={(e) => setNewTag(e.target.value)}
                      onKeyDown={(e) => {
                        if (e.key === 'Enter') {
                          e.preventDefault();
                          addArrayItem('tags', newTag);
                        }
                      }}
                      className="flex-1 px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-[#DC7C67] focus:border-transparent outline-none transition-all text-sm"
                      placeholder="–¢–µ–≥"
                    />
                    <button
                      onClick={() => addArrayItem('tags', newTag)}
                      className="px-3 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors text-sm"
                    >
                      <Plus className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}