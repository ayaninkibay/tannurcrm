// src/lib/admin_orders/useOrderModule.ts

'use client';

import { useState, useCallback } from 'react';
import { OrderService, OrderWithItems, ActionLog, OrderStatus } from './OrderService';

export interface UseOrderModuleReturn {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  activeOrders: OrderWithItems[];  // –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  completedOrders: OrderWithItems[];  // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  currentOrder: OrderWithItems | null;
  actionLog: ActionLog[];
  loading: boolean;
  loadingCompleted: boolean;  // –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
  error: string | null;
  completedPagination: {
    total: number;
    page: number;
    pageSize: number;
    totalPages: number;
  };
  
  // –ú–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏
  loadAllActiveOrders: () => Promise<void>;
  loadCompletedOrders: (page?: number, pageSize?: number) => Promise<void>;
  loadOrderById: (orderId: string) => Promise<void>;
  loadActionLog: (orderId: string) => Promise<void>;
  
  // –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  updateOrderStatus: (orderId: string, newStatus: OrderStatus, reason?: string) => Promise<boolean>;
  updateNotes: (orderId: string, notes: string) => Promise<boolean>;
  updateDeliveryAddress: (orderId: string, address: string) => Promise<boolean>;
  updateDeliveryDate: (orderId: string, date: string) => Promise<boolean>;
  updateDeliveryMethod: (orderId: string, method: 'pickup' | 'delivery') => Promise<boolean>;
  
  // –£—Ç–∏–ª–∏—Ç—ã
  clearError: () => void;
  clearCurrentOrder: () => void;
  refreshOrders: () => Promise<void>;
}

export const useOrderModule = (): UseOrderModuleReturn => {
  const [activeOrders, setActiveOrders] = useState<OrderWithItems[]>([]);
  const [completedOrders, setCompletedOrders] = useState<OrderWithItems[]>([]);
  const [currentOrder, setCurrentOrder] = useState<OrderWithItems | null>(null);
  const [actionLog, setActionLog] = useState<ActionLog[]>([]);
  const [loading, setLoading] = useState(false);
  const [loadingCompleted, setLoadingCompleted] = useState(false);
  const [error, setError] = useState<string | null>(null);
  
  const [completedPagination, setCompletedPagination] = useState({
    total: 0,
    page: 1,
    pageSize: 50,
    totalPages: 0
  });
  
  const orderService = new OrderService();

  /**
   * üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
   */
  const loadAllActiveOrders = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üîÑ Loading ALL active orders...');
      
      const result = await orderService.getAllActiveOrders();
      
      if (result.success && result.data) {
        setActiveOrders(result.data);
        console.log('‚úÖ Active orders loaded:', result.data.length);
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤');
        console.error('‚ùå Failed to load orders:', result.error);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      console.error('üí• Error:', err);
    } finally {
      setLoading(false);
    }
  }, []);

  /**
   * üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–ø–æ –∑–∞–ø—Ä–æ—Å—É)
   */
  const loadCompletedOrders = useCallback(async (
    page: number = 1,
    pageSize: number = 50
  ) => {
    try {
      setLoadingCompleted(true);
      setError(null);
      
      console.log('üîÑ Loading completed orders (page ' + page + ')...');
      
      const result = await orderService.getCompletedOrders(page, pageSize);
      
      if (result.success && result.data) {
        if (page === 1) {
          // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –∑–∞–º–µ–Ω—è–µ–º
          setCompletedOrders(result.data.orders);
        } else {
          // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –¥–æ–±–∞–≤–ª—è–µ–º
          setCompletedOrders(prev => [...prev, ...result.data.orders]);
        }
        
        setCompletedPagination({
          total: result.data.total,
          page: result.data.page,
          pageSize: result.data.pageSize,
          totalPages: result.data.totalPages
        });
        
        console.log('‚úÖ Completed orders loaded:', result.data.orders.length, 'of', result.data.total);
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
        console.error('‚ùå Failed to load completed orders:', result.error);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      console.error('üí• Error:', err);
    } finally {
      setLoadingCompleted(false);
    }
  }, []);

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
   */
  const loadOrderById = useCallback(async (orderId: string) => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('üì¶ Loading order:', orderId);
      
      const result = await orderService.getOrderById(orderId);
      
      if (result.success && result.data) {
        setCurrentOrder(result.data);
        console.log('‚úÖ Order loaded with', result.data.order_items?.length || 0, 'items');
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞');
        console.error('‚ùå Failed to load order:', result.error);
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      console.error('üí• Error:', err);
    } finally {
      setLoading(false);
    }
  }, []);

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π
   */
  const loadActionLog = useCallback(async (orderId: string) => {
    try {
      setError(null);
      
      const result = await orderService.getOrderActionLog(orderId);
      
      if (result.success && result.data) {
        setActionLog(result.data);
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∂—É—Ä–Ω–∞–ª–∞');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  }, []);

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
   */
  const updateOrderStatus = useCallback(async (
    orderId: string,
    newStatus: OrderStatus,
    reason?: string
  ): Promise<boolean> => {
    try {
      setLoading(true);
      setError(null);

      // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: { user } } = await (await import('@/lib/supabase/client')).supabase.auth.getUser();
      if (!user) {
        setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      const result = await orderService.updateOrderStatus(orderId, newStatus, user.id, reason);
      
      if (result.success) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ
        if (newStatus === 'delivered' || newStatus === 'cancelled' || newStatus === 'returned') {
          // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å—Ç–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º - —É–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
          setActiveOrders(prev => prev.filter(o => o.id !== orderId));
          // –ò –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
          if (completedOrders.length > 0) {
            await loadCompletedOrders(1, completedPagination.pageSize);
          }
        } else {
          // –ò–Ω–∞—á–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ
          await loadAllActiveOrders();
        }
        
        // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
        if (currentOrder?.id === orderId) {
          await loadOrderById(orderId);
          await loadActionLog(orderId);
        }
        
        return true;
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
        return false;
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return false;
    } finally {
      setLoading(false);
    }
  }, [currentOrder, completedOrders.length, completedPagination.pageSize, loadAllActiveOrders, loadCompletedOrders, loadOrderById, loadActionLog]);

  const updateNotes = useCallback(async (
    orderId: string,
    notes: string
  ): Promise<boolean> => {
    try {
      setLoading(true);
      setError(null);

      const { data: { user } } = await (await import('@/lib/supabase/client')).supabase.auth.getUser();
      if (!user) {
        setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      const result = await orderService.updateOrderNotes(orderId, notes, user.id);
      
      if (result.success) {
        if (currentOrder?.id === orderId) {
          await loadOrderById(orderId);
          await loadActionLog(orderId);
        }
        return true;
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫');
        return false;
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return false;
    } finally {
      setLoading(false);
    }
  }, [currentOrder, loadOrderById, loadActionLog]);

  const updateDeliveryAddress = useCallback(async (
    orderId: string,
    address: string
  ): Promise<boolean> => {
    try {
      setLoading(true);
      setError(null);

      const { data: { user } } = await (await import('@/lib/supabase/client')).supabase.auth.getUser();
      if (!user) {
        setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      const result = await orderService.updateDeliveryAddress(orderId, address, user.id);
      
      if (result.success) {
        if (currentOrder?.id === orderId) {
          await loadOrderById(orderId);
          await loadActionLog(orderId);
        }
        return true;
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞');
        return false;
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return false;
    } finally {
      setLoading(false);
    }
  }, [currentOrder, loadOrderById, loadActionLog]);

  const updateDeliveryDate = useCallback(async (
    orderId: string,
    date: string
  ): Promise<boolean> => {
    try {
      setLoading(true);
      setError(null);

      const { data: { user } } = await (await import('@/lib/supabase/client')).supabase.auth.getUser();
      if (!user) {
        setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      const result = await orderService.updateDeliveryDate(orderId, date, user.id);
      
      if (result.success) {
        if (currentOrder?.id === orderId) {
          await loadOrderById(orderId);
          await loadActionLog(orderId);
        }
        return true;
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã');
        return false;
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return false;
    } finally {
      setLoading(false);
    }
  }, [currentOrder, loadOrderById, loadActionLog]);

  const updateDeliveryMethod = useCallback(async (
    orderId: string,
    method: 'pickup' | 'delivery'
  ): Promise<boolean> => {
    try {
      setLoading(true);
      setError(null);

      const { data: { user } } = await (await import('@/lib/supabase/client')).supabase.auth.getUser();
      if (!user) {
        setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return false;
      }

      const result = await orderService.updateDeliveryMethod(orderId, method, user.id);
      
      if (result.success) {
        if (currentOrder?.id === orderId) {
          await loadOrderById(orderId);
          await loadActionLog(orderId);
        }
        return true;
      } else {
        setError(result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏');
        return false;
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      return false;
    } finally {
      setLoading(false);
    }
  }, [currentOrder, loadOrderById, loadActionLog]);

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
   */
  const refreshOrders = useCallback(async () => {
    await loadAllActiveOrders();
    if (completedOrders.length > 0) {
      await loadCompletedOrders(1, completedPagination.pageSize);
    }
  }, [loadAllActiveOrders, loadCompletedOrders, completedOrders.length, completedPagination.pageSize]);

  const clearError = useCallback(() => {
    setError(null);
  }, []);

  const clearCurrentOrder = useCallback(() => {
    setCurrentOrder(null);
    setActionLog([]);
  }, []);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏—è
    activeOrders,
    completedOrders,
    currentOrder,
    actionLog,
    loading,
    loadingCompleted,
    error,
    completedPagination,
    
    // –ú–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏
    loadAllActiveOrders,
    loadCompletedOrders,
    loadOrderById,
    loadActionLog,
    
    // –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    updateOrderStatus,
    updateNotes,
    updateDeliveryAddress,
    updateDeliveryDate,
    updateDeliveryMethod,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    clearError,
    clearCurrentOrder,
    refreshOrders
  };
};