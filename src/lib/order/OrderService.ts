// src/lib/order/OrderService.ts

import { supabase } from '@/lib/supabase/client';

// ==========================================
// –¢–ò–ü–´
// ==========================================

export interface Order {
  id: string;
  order_number: string;
  user_id: string;
  total_amount: number;
  order_status: 'new' | 'confirmed' | 'processing' | 'ready_for_pickup' | 'shipped' | 'delivered' | 'cancelled' | 'returned' | 'refund_pending';
  payment_status: 'pending' | 'paid' | 'cancelled' | 'refunded' | 'processing';
  delivery_address: string;
  notes?: string | null;
  created_at: string;
  updated_at: string | null;
  paid_at: string | null;
}

export interface OrderItem {
  id: string;
  order_id: string;
  product_id: string;
  quantity: number;
  price: number;
  total: number;
  product?: {
    name: string;
    image_url: string | null;
    category: string | null;
  };
}

export interface OrderWithItems extends Order {
  order_items: OrderItem[];
}

export interface ServiceResult<T = void> {
  success: boolean;
  data?: T;
  message?: string;
  error?: string;
}

// ==========================================
// –°–ï–†–í–ò–°
// ==========================================

class OrderService {
  
  /**
   * –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
   */
  async createAndPayOrder(
    userId: string,
    cartId: string,
    deliveryAddress: string,
    deliveryMethod: 'pickup' | 'delivery' = 'pickup',
    notes?: string
  ): Promise<ServiceResult<Order>> {
    try {
      console.log('üí≥ Creating order...', { userId, cartId, deliveryAddress });
      
      const { data, error } = await supabase.rpc('create_and_pay_order', {
        p_user_id: userId,
        p_cart_id: cartId,
        p_delivery_address: deliveryAddress,
        p_delivery_method: deliveryMethod,
        p_notes: notes || null
      });

      if (error) {
        console.error('‚ùå RPC error:', error);
        throw error;
      }

      if (!data || !data.success) {
        const errorMessage = data?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑';
        console.error('‚ùå Order creation failed:', errorMessage);
        
        if (data?.validation) {
          const validation = data.validation;
          if (validation.errors && validation.errors.length > 0) {
            return {
              success: false,
              error: validation.errors.join('; ')
            };
          }
        }
        
        return {
          success: false,
          error: errorMessage
        };
      }

      console.log('‚úÖ Order created:', data.order);

      return {
        success: true,
        data: data.order,
        message: data.message || '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω'
      };

    } catch (error: any) {
      console.error('‚ùå Error in createAndPayOrder:', error);
      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞'
      };
    }
  }

  /**
   * –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É (–∫–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª "–Ø –æ–ø–ª–∞—Ç–∏–ª")
   */
  async confirmPayment(
    orderId: string,
    userId: string,
    paymentNotes: string
  ): Promise<ServiceResult> {
    try {
      console.log('‚úÖ Confirming payment...', { orderId, paymentNotes });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const { data: order, error: fetchError } = await supabase
        .from('orders')
        .select('user_id, notes')
        .eq('id', orderId)
        .single();

      if (fetchError || !order) {
        return { success: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      if (order.user_id !== userId) {
        return { success: false, error: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É' };
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
      const updatedNotes = order.notes 
        ? `${order.notes}\n\n–î–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã:\n${paymentNotes}`
        : `–î–∞–Ω–Ω—ã–µ –æ–ø–ª–∞—Ç—ã:\n${paymentNotes}`;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ PAID
      const { error: updateError } = await supabase
        .from('orders')
        .update({
          payment_status: 'paid',
          paid_at: new Date().toISOString(),
          notes: updatedNotes,
          updated_at: new Date().toISOString()
        })
        .eq('id', orderId);

      if (updateError) throw updateError;

      console.log('‚úÖ Payment confirmed');

      return { success: true, message: '–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞' };

    } catch (error: any) {
      console.error('‚ùå Error confirming payment:', error);
      return { success: false, error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã' };
    }
  }

  /**
   * –û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É (–∫–ª–∏–µ–Ω—Ç —Å–∫–∞–∑–∞–ª "–ù–µ –æ–ø–ª–∞—Ç–∏–ª")
   */
  async declinePayment(
    orderId: string,
    userId: string,
    declineNotes: string
  ): Promise<ServiceResult> {
    try {
      console.log('‚ùå Declining payment...', { orderId, declineNotes });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const { data: order, error: fetchError } = await supabase
        .from('orders')
        .select('user_id, notes')
        .eq('id', orderId)
        .single();

      if (fetchError || !order) {
        return { success: false, error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      if (order.user_id !== userId) {
        return { success: false, error: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É' };
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É
      const updatedNotes = order.notes 
        ? `${order.notes}\n\n–û–ø–ª–∞—Ç–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:\n${declineNotes}`
        : `–û–ø–ª–∞—Ç–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:\n${declineNotes}`;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ PENDING
      const { error: updateError } = await supabase
        .from('orders')
        .update({
          payment_status: 'pending',
          notes: updatedNotes,
          updated_at: new Date().toISOString()
        })
        .eq('id', orderId);

      if (updateError) throw updateError;

      console.log('‚úÖ Payment declined, order status set to pending');

      return { success: true, message: '–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω' };

    } catch (error: any) {
      console.error('‚ùå Error declining payment:', error);
      return { success: false, error: error.message || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞' };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserOrders(userId: string, limit?: number): Promise<ServiceResult<OrderWithItems[]>> {
    try {
      console.log('üìã Loading user orders...', userId);
      
      let query = supabase
        .from('orders')
        .select(`
          *,
          order_items (
            id,
            product_id,
            quantity,
            price,
            total,
            products (
              name,
              image_url,
              category
            )
          )
        `)
        .eq('user_id', userId)
        .order('created_at', { ascending: false });

      if (limit) {
        query = query.limit(limit);
      }

      const { data: orders, error } = await query;

      if (error) {
        console.error('‚ùå Error loading orders:', error);
        throw error;
      }

      const processedOrders: OrderWithItems[] = (orders || []).map(order => ({
        ...order,
        order_items: (order.order_items || []).map((item: any) => ({
          id: item.id,
          order_id: order.id,
          product_id: item.product_id,
          quantity: item.quantity || 1,
          price: item.price || 0,
          total: item.total || 0,
          product: item.products ? {
            name: item.products.name,
            image_url: item.products.image_url,
            category: item.products.category
          } : undefined
        }))
      }));

      console.log(`‚úÖ Loaded ${processedOrders.length} orders`);

      return {
        success: true,
        data: processedOrders
      };

    } catch (error: any) {
      console.error('‚ùå Error in getUserOrders:', error);
      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
   */
  async getOrderById(orderId: string, userId: string): Promise<ServiceResult<OrderWithItems>> {
    try {
      console.log('üì¶ Loading order by ID...', { orderId, userId });

      const { data: order, error } = await supabase
        .from('orders')
        .select(`
          *,
          order_items (
            id,
            product_id,
            quantity,
            price,
            total,
            products (
              name,
              image_url,
              category
            )
          )
        `)
        .eq('id', orderId)
        .eq('user_id', userId)
        .single();

      if (error) {
        if (error.code === 'PGRST116') {
          return {
            success: false,
            error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞'
          };
        }
        throw error;
      }

      const processedOrder: OrderWithItems = {
        ...order,
        order_items: (order.order_items || []).map((item: any) => ({
          id: item.id,
          order_id: order.id,
          product_id: item.product_id,
          quantity: item.quantity || 1,
          price: item.price || 0,
          total: item.total || 0,
          product: item.products ? {
            name: item.products.name,
            image_url: item.products.image_url,
            category: item.products.category
          } : undefined
        }))
      };

      console.log('‚úÖ Order loaded');

      return {
        success: true,
        data: processedOrder
      };

    } catch (error: any) {
      console.error('‚ùå Error in getOrderById:', error);
      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–∞'
      };
    }
  }

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
   * - –ï—Å–ª–∏ –ù–ï –æ–ø–ª–∞—á–µ–Ω (paid_at = null) ‚Üí –£–î–ê–õ–Ø–ï–ú –∑–∞–∫–∞–∑
   * - –ï—Å–ª–∏ –û–ü–õ–ê–ß–ï–ù (paid_at != null) ‚Üí –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ refund_pending
   */
  async cancelOrder(orderId: string, userId: string): Promise<ServiceResult> {
    try {
      console.log('‚ùå Cancelling order...', { orderId, userId });

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
      const { data: order, error: fetchError } = await supabase
        .from('orders')
        .select('order_status, payment_status, user_id, paid_at')
        .eq('id', orderId)
        .single();

      if (fetchError || !order) {
        return {
          success: false,
          error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        };
      }

      if (order.user_id !== userId) {
        return {
          success: false,
          error: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É'
        };
      }

      // –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ new –∏–ª–∏ processing
      if (!['new', 'processing'].includes(order.order_status)) {
        return {
          success: false,
          error: '–ó–∞–∫–∞–∑ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ'
        };
      }

      // –ü–†–û–í–ï–†–Ø–ï–ú –û–ü–õ–ê–¢–£
      if (!order.paid_at) {
        // ‚ùå –ù–ï –û–ü–õ–ê–ß–ï–ù ‚Üí –£–î–ê–õ–Ø–ï–ú –∑–∞–∫–∞–∑
        console.log('üí∞ Order not paid, deleting...');
        
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º order_items (–∏–∑-–∑–∞ foreign key)
        const { error: deleteItemsError } = await supabase
          .from('order_items')
          .delete()
          .eq('order_id', orderId);

        if (deleteItemsError) {
          console.error('‚ùå Error deleting order items:', deleteItemsError);
          throw deleteItemsError;
        }

        // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º –∑–∞–∫–∞–∑
        const { error: deleteOrderError } = await supabase
          .from('orders')
          .delete()
          .eq('id', orderId);

        if (deleteOrderError) {
          console.error('‚ùå Error deleting order:', deleteOrderError);
          throw deleteOrderError;
        }

        console.log('‚úÖ Order deleted (not paid)');

        return {
          success: true,
          message: '–ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω'
        };

      } else {
        // ‚úÖ –û–ü–õ–ê–ß–ï–ù ‚Üí –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ refund_pending
        console.log('üí∞ Order paid, setting refund_pending status...');
        
        const { error: updateError } = await supabase
          .from('orders')
          .update({
            order_status: 'refund_pending',
            updated_at: new Date().toISOString()
          })
          .eq('id', orderId);

        if (updateError) {
          console.error('‚ùå Error updating order:', updateError);
          throw updateError;
        }

        console.log('‚úÖ Order status changed to refund_pending');

        return {
          success: true,
          message: '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤.'
        };
      }

    } catch (error: any) {
      console.error('‚ùå Error in cancelOrder:', error);
      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤
   */
  async getUserOrdersStats(userId: string): Promise<ServiceResult<{
    totalOrders: number;
    totalSpent: number;
    activeOrders: number;
    completedOrders: number;
    pendingOrders: number;
  }>> {
    try {
      console.log('üìä Loading user orders stats...', userId);

      const { data: orders, error } = await supabase
        .from('orders')
        .select('order_status, payment_status, total_amount')
        .eq('user_id', userId);

      if (error) throw error;

      const stats = {
        totalOrders: orders?.length || 0,
        totalSpent: orders?.filter(o => o.payment_status === 'paid')
          .reduce((sum, o) => sum + (o.total_amount || 0), 0) || 0,
        activeOrders: orders?.filter(o => 
          ['confirmed', 'processing', 'shipped'].includes(o.order_status)
        ).length || 0,
        completedOrders: orders?.filter(o => o.order_status === 'delivered').length || 0,
        pendingOrders: orders?.filter(o => o.payment_status === 'pending').length || 0
      };

      console.log('‚úÖ Stats loaded:', stats);

      return {
        success: true,
        data: stats
      };

    } catch (error: any) {
      console.error('‚ùå Error in getUserOrdersStats:', error);
      return {
        success: false,
        error: error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
      };
    }
  }
}

export const orderService = new OrderService();