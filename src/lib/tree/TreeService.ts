// services/TreeService.ts

import { createClient } from '@supabase/supabase-js';
import type { Database } from '@/types/supabase';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –≤–∞—à–∏–º TeamTree –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
export interface TeamMember {
  id: string;
  parentId: string | null;
  name: string;
  avatar?: string;
  tariff?: string;
  profession?: string;
  role?: string;
  verified: boolean;
  teamCount?: number;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –ë–î
  email?: string;
  phone?: string;
  level?: number;
  turnover?: number;
}

export class TreeService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getMyTeam(userId: string): Promise<TeamMember[]> {
    try {
      console.log('üîç TreeService.getMyTeam –¥–ª—è userId:', userId);
      
      // –ü–æ–ª—É—á–∞–µ–º —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç SETOF uuid)
      const { data: teamData, error: teamError } = await supabase
        .rpc('get_team_members', { dealer_id: userId });

      console.log('üîç RPC —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', { teamData, teamError });

      if (teamError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–æ–º–∞–Ω–¥—ã:', teamError);
        // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        return await this.getTeamDirectly(userId);
      }

      // teamData –ø—Ä–∏—Ö–æ–¥–∏—Ç –∫–∞–∫ –º–∞—Å—Å–∏–≤ UUID
      const teamIds = teamData?.map((item: any) => item) || [];
      console.log('üîç Team IDs –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏:', teamIds);

      // –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const allIds = teamIds.length > 0 ? [...teamIds, userId] : [userId];
      console.log('üîç –í—Å–µ ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', allIds);

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–ª–µ–Ω–∞—Ö –∫–æ–º–∞–Ω–¥—ã
      const { data: users, error: usersError } = await supabase
        .from('users')
        .select('*')
        .in('id', allIds);

      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ users:', { users, usersError, count: users?.length });

      if (usersError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersError);
        throw usersError;
      }

      // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—É—Å—Ç–æ–π
      const result = this.transformUsersToTeamMembers(users || []);
      console.log('üîç –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:', result);
      
      return result;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      return [];
    }
  }

  /**
   * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
   */
  static async getTeamDirectly(userId: string): Promise<TeamMember[]> {
    try {
      console.log('üîç getTeamDirectly –¥–ª—è userId:', userId);
      
      const allMembers: any[] = [];
      const processed = new Set<string>();
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö
      const fetchDescendants = async (parentId: string) => {
        if (processed.has(parentId)) return;
        processed.add(parentId);

        console.log('üîç –ò—â–µ–º –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –¥–ª—è parentId:', parentId);

        const { data, error } = await supabase
          .from('users')
          .select('*')
          .eq('parent_id', parentId);

        console.log('üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö:', data?.length || 0);

        if (error) throw error;

        if (data && data.length > 0) {
          allMembers.push(...data);
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          for (const user of data) {
            await fetchDescendants(user.id);
          }
        }
      };

      // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: currentUser, error: userError } = await supabase
        .from('users')
        .select('*')
        .eq('id', userId)
        .single();

      if (userError) throw userError;
      
      console.log('üîç –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', currentUser?.first_name, currentUser?.last_name);
      allMembers.push(currentUser);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö
      await fetchDescendants(userId);

      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å parent_id, –ø–æ–ª—É—á–∞–µ–º –∏ —Ä–æ–¥–∏—Ç–µ–ª—è
      if (currentUser.parent_id) {
        console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è:', currentUser.parent_id);
        const { data: parent, error: parentError } = await supabase
          .from('users')
          .select('*')
          .eq('id', currentUser.parent_id)
          .single();

        if (!parentError && parent) {
          allMembers.push(parent);
        }
      }

      console.log('üîç –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', allMembers.length);
      return this.transformUsersToTeamMembers(allMembers);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã
   */
  static async getUserAsTeamMember(userId: string): Promise<TeamMember[]> {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', userId)
        .single();

      if (error) throw error;

      return this.transformUsersToTeamMembers([data]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      return [];
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç TeamMember
   */
  private static transformUsersToTeamMembers(users: any[]): TeamMember[] {
    console.log('üîç transformUsersToTeamMembers –ø–æ–ª—É—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length);
    
    const members: TeamMember[] = users.map(user => ({
      id: user.id,
      parentId: user.parent_id,
      name: `${user.first_name || ''} ${user.last_name || ''}`.trim() || '–ë–µ–∑ –∏–º–µ–Ω–∏',
      avatar: user.avatar_url,
      tariff: this.getTariffByLevel(user.personal_level),
      profession: this.mapRoleToProfession(user.role),
      role: this.mapRoleToPosition(user.role),
      verified: user.is_confirmed || false,
      teamCount: 0,
      email: user.email,
      phone: user.phone,
      level: user.personal_level,
      turnover: user.personal_turnover
    }));

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    members.forEach(member => {
      member.teamCount = this.countTeamMembers(member.id, members);
    });

    console.log('üîç –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:', members.map(m => ({ id: m.id, name: m.name, parentId: m.parentId })));
    return members;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ –ø–æ —É—Ä–æ–≤–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private static getTariffByLevel(level: number): string {
    if (level >= 30) return 'Enterprise';
    if (level >= 20) return 'Premium';
    if (level >= 10) return 'Business';
    return 'Basic';
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ —Ä–æ–ª–∏ –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
   */
  private static mapRoleToProfession(role: string | null): string {
    switch (role) {
      case 'admin':
        return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
      case 'celebrity':
        return '–ó–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç—å';
      case 'dealer':
        return '–î–∏–ª–µ—Ä';
      case 'user':
        return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      default:
        return '–£—á–∞—Å—Ç–Ω–∏–∫';
    }
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ —Ä–æ–ª–∏ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å
   */
  private static mapRoleToPosition(role: string | null): string {
    switch (role) {
      case 'admin':
        return 'CEO';
      case 'celebrity':
        return 'Ambassador';
      case 'dealer':
        return 'Partner';
      case 'user':
        return 'Member';
      default:
        return 'Member';
    }
  }

  /**
   * –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–ª–µ–Ω–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ
   */
  private static countTeamMembers(userId: string, allMembers: TeamMember[]): number {
    let count = 0;
    const children = allMembers.filter(m => m.parentId === userId);
    
    count += children.length;
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º –ø–æ—Ç–æ–º–∫–æ–≤
    children.forEach(child => {
      count += this.countTeamMembers(child.id, allMembers);
    });
    
    return count;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
   */
  static async getTeamStats(userId: string): Promise<{
    totalMembers: number;
    totalTurnover: number;
    goal: number;
    remaining: number;
  }> {
    try {
      const members = await this.getMyTeam(userId);
      
      const totalMembers = members.filter(m => m.id !== userId).length;
      const totalTurnover = members.reduce((sum, member) => sum + (member.turnover || 0), 0);
      const goal = 9800000; // –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const remaining = Math.max(0, goal - totalTurnover);

      return {
        totalMembers,
        totalTurnover,
        goal,
        remaining
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {
        totalMembers: 0,
        totalTurnover: 0,
        goal: 9800000,
        remaining: 9800000
      };
    }
  }
}