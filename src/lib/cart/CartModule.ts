// src/lib/cart/CartModule.tsx

'use client';

import { useState, useCallback } from 'react';
import { toast } from 'react-hot-toast';
import { cartService, type DeliveryMethod } from './CartService';
import type { Cart, CartItemView } from '@/types';

// ==========================================
// –¢–ò–ü–´
// ==========================================

export interface UseCartModuleReturn {
  // State
  cart: Cart | null;
  cartItems: CartItemView[];
  selectedItems: Set<string>;
  loading: boolean;
  loadingStates: {
    addingItem: boolean;
    updatingItem: Map<string, boolean>;
    removingItem: Map<string, boolean>;
  };
  
  // Actions
  loadUserCart: (userId: string) => Promise<void>;
  addItem: (userId: string, productId: string, quantity: number) => Promise<void>;
  updateQuantity: (itemId: string, newQuantity: number) => Promise<void>;
  removeItem: (itemId: string) => Promise<void>;
  toggleItemSelection: (itemId: string) => void;
  toggleSelectAll: () => void;
  clearSelection: () => void;
  updateDeliveryMethod: (method: DeliveryMethod) => Promise<void>;
  updateDeliveryAddress: (address: string) => Promise<void>;
  validateCart: () => Promise<{ valid: boolean; errors: string[]; warnings: string[] }>;
  clearCart: () => Promise<void>;
  
  // Computed
  calculateTotals: () => {
    subtotal: number;
    deliveryFee: number;
    total: number;
    itemsCount: number;
  };
  getDeliveryMethod: () => DeliveryMethod;
  getDeliveryCost: () => number;
}

// ==========================================
// HOOK
// ==========================================

export const useCartModule = (): UseCartModuleReturn => {
  // State
  const [cart, setCart] = useState<Cart | null>(null);
  const [cartItems, setCartItems] = useState<CartItemView[]>([]);
  const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set());
  const [loading, setLoading] = useState(false);
  
  // Loading states –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  const [loadingStates, setLoadingStates] = useState({
    addingItem: false,
    updatingItem: new Map<string, boolean>(),
    removingItem: new Map<string, boolean>()
  });

  // ==========================================
  // –ó–ê–ì–†–£–ó–ö–ê –ö–û–†–ó–ò–ù–´
  // ==========================================
  
  const loadUserCart = useCallback(async (userId: string) => {
    if (!userId) {
      console.error('‚ùå User ID is required');
      return;
    }

    setLoading(true);
    try {
      console.log('üõí Loading cart for user:', userId);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      const cartId = await cartService.getOrCreateCart(userId);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
      const { cart: loadedCart, items } = await cartService.loadCart(cartId);
      
      setCart(loadedCart);
      setCartItems(items);
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–∑ localStorage
      const savedSelection = localStorage.getItem(`cart_selection_${cartId}`);
      if (savedSelection) {
        try {
          const saved = JSON.parse(savedSelection);
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤—Å–µ –µ—â–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã
          const validIds = saved.filter((id: string) => {
            const item = items.find(i => i.id === id);
            return item && item.stock > 0;
          });
          setSelectedItems(new Set(validIds));
        } catch (error) {
          console.error('‚ùå Error parsing saved selection:', error);
          // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
          const availableItems = items.filter(item => item.stock > 0).map(item => item.id);
          setSelectedItems(new Set(availableItems));
        }
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        const availableItems = items.filter(item => item.stock > 0).map(item => item.id);
        setSelectedItems(new Set(availableItems));
      }
      
      console.log('‚úÖ Cart loaded:', { 
        cartId, 
        itemsCount: items.length,
        deliveryMethod: loadedCart.delivery_method || 'pickup',
        deliveryCost: loadedCart.delivery_cost || 0
      });
      
    } catch (error: any) {
      console.error('‚ùå Error loading cart:', error);
      toast.error(error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã');
    } finally {
      setLoading(false);
    }
  }, []);

  // ==========================================
  // –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê
  // ==========================================
  
  const addItem = useCallback(async (
    userId: string,
    productId: string,
    quantity: number
  ) => {
    if (!userId || !productId) {
      toast.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return;
    }

    setLoadingStates(prev => ({ ...prev, addingItem: true }));
    
    try {
      console.log('‚ûï Adding item to cart:', { productId, quantity });
      
      const result = await cartService.addItemToCart(userId, productId, quantity);
      
      if (!result.success) {
        toast.error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä');
        return;
      }
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      await loadUserCart(userId);
      
      toast.success(result.message || '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É');
      
    } catch (error: any) {
      console.error('‚ùå Error adding item:', error);
      toast.error(error.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
    } finally {
      setLoadingStates(prev => ({ ...prev, addingItem: false }));
    }
  }, [loadUserCart]);

  // ==========================================
  // –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–û–õ–ò–ß–ï–°–¢–í–ê
  // ==========================================
  
  const updateQuantity = useCallback(async (itemId: string, newQuantity: number) => {
    const item = cartItems.find(i => i.id === itemId);
    if (!item) return;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü
    if (newQuantity < 1) newQuantity = 1;
    if (newQuantity > item.stock) newQuantity = item.stock;
    
    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (newQuantity === item.quantity) return;

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    const previousQuantity = item.quantity;
    setCartItems(prev => prev.map(i => 
      i.id === itemId ? { ...i, quantity: newQuantity } : i
    ));

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loading state –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    setLoadingStates(prev => ({
      ...prev,
      updatingItem: new Map(prev.updatingItem).set(itemId, true)
    }));

    try {
      console.log('üîÑ Updating quantity:', { itemId, newQuantity });
      
      const result = await cartService.updateItemQuantity(itemId, newQuantity);
      
      if (!result.success) {
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        setCartItems(prev => prev.map(i => 
          i.id === itemId ? { ...i, quantity: previousQuantity } : i
        ));
        toast.error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
        return;
      }
      
      // –£—Å–ø–µ—Ö - —É–∂–µ –æ–±–Ω–æ–≤–∏–ª–∏ UI –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ
      
    } catch (error: any) {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setCartItems(prev => prev.map(i => 
        i.id === itemId ? { ...i, quantity: previousQuantity } : i
      ));
      console.error('‚ùå Error updating quantity:', error);
      toast.error(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
    } finally {
      // –£–±–∏—Ä–∞–µ–º loading state
      setLoadingStates(prev => {
        const newMap = new Map(prev.updatingItem);
        newMap.delete(itemId);
        return { ...prev, updatingItem: newMap };
      });
    }
  }, [cartItems]);

  // ==========================================
  // –£–î–ê–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê
  // ==========================================
  
  const removeItem = useCallback(async (itemId: string) => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º loading state
    setLoadingStates(prev => ({
      ...prev,
      removingItem: new Map(prev.removingItem).set(itemId, true)
    }));

    try {
      console.log('üóëÔ∏è Removing item:', itemId);
      
      const result = await cartService.removeItem(itemId);
      
      if (!result.success) {
        toast.error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä');
        return;
      }
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ state
      setCartItems(prev => prev.filter(item => item.id !== itemId));
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
      setSelectedItems(prev => {
        const newSet = new Set(prev);
        newSet.delete(itemId);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        if (cart?.id) {
          localStorage.setItem(
            `cart_selection_${cart.id}`,
            JSON.stringify(Array.from(newSet))
          );
        }
        
        return newSet;
      });
      
      toast.success('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
      
    } catch (error: any) {
      console.error('‚ùå Error removing item:', error);
      toast.error(error.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞');
    } finally {
      // –£–±–∏—Ä–∞–µ–º loading state
      setLoadingStates(prev => {
        const newMap = new Map(prev.removingItem);
        newMap.delete(itemId);
        return { ...prev, removingItem: newMap };
      });
    }
  }, [cart]);

  // ==========================================
  // –í–´–ë–û–† –¢–û–í–ê–†–û–í
  // ==========================================
  
  const toggleItemSelection = useCallback((itemId: string) => {
    const item = cartItems.find(i => i.id === itemId);
    if (!item || item.stock === 0) return;
    
    setSelectedItems(prev => {
      const newSet = new Set(prev);
      if (newSet.has(itemId)) {
        newSet.delete(itemId);
      } else {
        newSet.add(itemId);
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      if (cart?.id) {
        localStorage.setItem(
          `cart_selection_${cart.id}`,
          JSON.stringify(Array.from(newSet))
        );
      }
      
      return newSet;
    });
  }, [cartItems, cart]);

  const toggleSelectAll = useCallback(() => {
    const availableItems = cartItems.filter(item => item.stock > 0);
    
    if (selectedItems.size === availableItems.length && selectedItems.size > 0) {
      // –°–Ω—è—Ç—å –≤—ã–±–æ—Ä —Å–æ –≤—Å–µ—Ö
      setSelectedItems(new Set());
      if (cart?.id) {
        localStorage.removeItem(`cart_selection_${cart.id}`);
      }
    } else {
      // –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
      const allIds = new Set(availableItems.map(item => item.id));
      setSelectedItems(allIds);
      if (cart?.id) {
        localStorage.setItem(
          `cart_selection_${cart.id}`,
          JSON.stringify(Array.from(allIds))
        );
      }
    }
  }, [cartItems, selectedItems, cart]);

  const clearSelection = useCallback(() => {
    setSelectedItems(new Set());
    if (cart?.id) {
      localStorage.removeItem(`cart_selection_${cart.id}`);
    }
  }, [cart]);

  // ==========================================
  // –°–ü–û–°–û–ë –ò –ê–î–†–ï–° –î–û–°–¢–ê–í–ö–ò
  // ==========================================
  
  const updateDeliveryMethod = useCallback(async (method: DeliveryMethod) => {
    if (!cart) return;
    
    // –í–ê–ñ–ù–û: –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑
    if (method !== 'pickup') {
      console.warn('‚ö†Ô∏è Delivery method other than pickup is not available yet');
      method = 'pickup';
    }
    
    try {
      const result = await cartService.updateDeliveryMethod(cart.id, method);
      
      if (!result.success) {
        toast.error(result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏');
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setCart(prev => prev ? { 
        ...prev, 
        delivery_method: result.data?.delivery_method || method,
        delivery_cost: result.data?.delivery_cost || 0
      } : null);
      
      console.log('‚úÖ Delivery method updated:', method);
      
    } catch (error: any) {
      console.error('‚ùå Error updating delivery method:', error);
      toast.error(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏');
    }
  }, [cart]);

  const updateDeliveryAddress = useCallback(async (address: string) => {
    if (!cart) return;
    
    try {
      const result = await cartService.updateDeliveryAddress(cart.id, address);
      
      if (!result.success) {
        toast.error(result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞');
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setCart(prev => prev ? { ...prev, delivery_address: address } : null);
      
      console.log('‚úÖ Delivery address updated:', address);
      
    } catch (error: any) {
      console.error('‚ùå Error updating delivery address:', error);
      toast.error(error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞');
    }
  }, [cart]);

  // ==========================================
  // –ü–û–õ–£–ß–ò–¢–¨ –¢–ï–ö–£–©–ò–ô –°–ü–û–°–û–ë –î–û–°–¢–ê–í–ö–ò –ò –°–¢–û–ò–ú–û–°–¢–¨
  // ==========================================
  
  const getDeliveryMethod = useCallback((): DeliveryMethod => {
    return (cart?.delivery_method as DeliveryMethod) || 'pickup';
  }, [cart]);

  const getDeliveryCost = useCallback((): number => {
    return cart?.delivery_cost || 0;
  }, [cart]);

  // ==========================================
  // –í–ê–õ–ò–î–ê–¶–ò–Ø –ö–û–†–ó–ò–ù–´
  // ==========================================
  
  const validateCart = useCallback(async () => {
    if (!cart) {
      return {
        valid: false,
        errors: ['–ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'],
        warnings: []
      };
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    const errors: string[] = [];
    const warnings: string[] = [];
    
    if (selectedItems.size === 0) {
      errors.push('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    const selectedCartItems = cartItems.filter(item => selectedItems.has(item.id));
    selectedCartItems.forEach(item => {
      if (item.stock === 0) {
        errors.push(`–¢–æ–≤–∞—Ä "${item.name}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ`);
      } else if (item.quantity > item.stock) {
        errors.push(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "${item.name}". –î–æ—Å—Ç—É–ø–Ω–æ: ${item.stock}`);
      }
    });

    if (errors.length > 0) {
      return { valid: false, errors, warnings };
    }

    try {
      console.log('‚úì Validating cart:', cart.id);
      
      const result = await cartService.validateCartForCheckout(cart.id);
      
      if (!result.success || !result.data) {
        return {
          valid: false,
          errors: [result.error || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã'],
          warnings: []
        };
      }
      
      return result.data;
      
    } catch (error: any) {
      console.error('‚ùå Error validating cart:', error);
      return {
        valid: false,
        errors: [error.message || '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã'],
        warnings: []
      };
    }
  }, [cart, cartItems, selectedItems]);

  // ==========================================
  // –û–ß–ò–°–¢–ö–ê –ö–û–†–ó–ò–ù–´
  // ==========================================
  
  const clearCart = useCallback(async () => {
    if (!cart || selectedItems.size === 0) return;
    
    try {
      console.log('üßπ Clearing cart items:', selectedItems.size);
      
      const itemIdsArray = Array.from(selectedItems);
      const result = await cartService.clearSelectedItems(cart.id, itemIdsArray);
      
      if (!result.success) {
        toast.error(result.error || '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã');
        return;
      }
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ state
      const remainingItems = cartItems.filter(item => !selectedItems.has(item.id));
      setCartItems(remainingItems);
      setSelectedItems(new Set());
      
      // –û—á–∏—â–∞–µ–º localStorage
      if (cart.id) {
        localStorage.removeItem(`cart_selection_${cart.id}`);
      }
      
      console.log('‚úÖ Cart cleared');
      
    } catch (error: any) {
      console.error('‚ùå Error clearing cart:', error);
      toast.error(error.message || '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã');
      throw error;
    }
  }, [cart, cartItems, selectedItems]);

  // ==========================================
  // –†–ê–°–ß–ï–¢ –ò–¢–û–ì–û–í
  // ==========================================
  
  const calculateTotals = useCallback(() => {
    const selectedCartItems = cartItems.filter(item => selectedItems.has(item.id));
    
    const subtotal = selectedCartItems.reduce(
      (sum, item) => sum + (item.price_dealer * item.quantity),
      0
    );
    
    // –ë–µ—Ä–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    const deliveryFee = cart?.delivery_cost || 0;
    
    const total = subtotal + deliveryFee;
    
    const itemsCount = selectedCartItems.reduce(
      (sum, item) => sum + item.quantity,
      0
    );

    return { subtotal, deliveryFee, total, itemsCount };
  }, [cartItems, selectedItems, cart]);

  // ==========================================
  // –í–û–ó–í–†–ê–©–ê–ï–ú API
  // ==========================================
  
  return {
    // State
    cart,
    cartItems,
    selectedItems,
    loading,
    loadingStates,
    
    // Actions
    loadUserCart,
    addItem,
    updateQuantity,
    removeItem,
    toggleItemSelection,
    toggleSelectAll,
    clearSelection,
    updateDeliveryMethod,
    updateDeliveryAddress,
    validateCart,
    clearCart,
    
    // Computed
    calculateTotals,
    getDeliveryMethod,
    getDeliveryCost
  };
};