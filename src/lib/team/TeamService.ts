// services/team.service.ts
import { supabase } from '@/lib/supabase/client';
import type { TeamStatsData } from '@/types/team.types';  // ‚≠ê –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ù–û–í–´–ô –¢–ò–ü

export interface TeamMember {
  id: string;
  parentId: string | null;
  name: string;
  avatar?: string;
  profession?: string;
  role?: string;
  verified: boolean;
  teamCount?: number;
  email?: string;
  phone?: string;
  turnover?: number;
  referralCode?: string;
  position?: string;
  hierarchyLevel?: number;
  hierarchyPath?: string[];
}

// ‚≠ê –°–¢–ê–†–´–ô –¢–ò–ü - –û–°–¢–ê–í–õ–Ø–ï–ú –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
export interface TeamStats {
  totalMembers: number;
  directMembers: number;
  totalTurnover: number;
  activeMembersCount: number;
  maxDepth?: number;
  goal: number;
  remaining: number;
}

export class TeamService {
  // –ö—ç—à –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
  private static teamCache: Map<string, { data: TeamMember[], timestamp: number }> = new Map();
  private static CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  // ============================================
  // –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å—é –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Recursive CTE –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  static async getMyTeam(userId: string, useCache: boolean = true): Promise<TeamMember[]> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (useCache) {
        const cached = this.teamCache.get(userId);
        if (cached && (Date.now() - cached.timestamp) < this.CACHE_TTL) {
          console.log('üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ –∫—ç—à–∞');
          return cached.data;
        }
      }

      // –ó–∞–ø—Ä–æ—Å –∫ –ë–î —á–µ—Ä–µ–∑ RPC —Ñ—É–Ω–∫—Ü–∏—é
      const { data, error } = await supabase
        .rpc('get_full_team_hierarchy', { root_user_id: userId });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ RPC get_full_team_hierarchy:', error);
        // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
        return await this.getTeamDirectlyOptimized(userId);
      }

      const teamMembers = await this.transformUsersToTeamMembers(data || []);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
      this.teamCache.set(userId, { data: teamMembers, timestamp: Date.now() });
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${teamMembers.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã`);
      return teamMembers;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
      return [];
    }
  }

  /**
   * ‚≠ê –ù–û–í–´–ô –ú–ï–¢–û–î - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç TeamStatsData)
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SQL —Ñ—É–Ω–∫—Ü–∏—é get_team_stats
   */
  static async getTeamStats(userId: string): Promise<TeamStatsData> {
    try {
      const { data, error } = await supabase
        .rpc('get_team_stats', { root_user_id: userId });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        return this.getDefaultStatsData();
      }

      const stats = data?.[0];
      
      if (!stats) {
        return this.getDefaultStatsData();
      }

      const totalMembers = Number(stats.total_members || 0);
      const { goal, shouldConfirm } = this.calculateGoalAndStatus(totalMembers);
      
      // –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      if (shouldConfirm) {
        await this.confirmUserStatus(userId);
      }

      // ‚≠ê –í–û–ó–í–†–ê–©–ê–ï–ú TeamStatsData
      return {
        totalMembers,
        directMembers: Number(stats.direct_members || 0),
        totalTurnover: Number(stats.total_turnover || 0),
        activeMembersCount: Number(stats.active_members || 0),
        maxDepth: Number(stats.max_depth || 0),
        goal,
        remaining: Math.max(0, goal - totalMembers)
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return this.getDefaultStatsData();
    }
  }

  /**
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getTeamStats() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Ç–∏–ø TeamStatsData
   * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  static async getTeamStatsLegacy(userId: string): Promise<TeamStats> {
    const data = await this.getTeamStats(userId);
    return data;  // –¢–∏–ø—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å)
   */
  static async getDirectReferrals(userId: string): Promise<TeamMember[]> {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('parent_id', userId)
        .order('created_at', { ascending: false });

      if (error) throw error;

      return this.transformUsersToTeamMembers(data || []);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å –∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π (—á–µ—Ä–µ–∑ RPC)
   */
  static async getDirectReferralsWithStats(userId: string): Promise<any[]> {
    try {
      const { data, error } = await supabase
        .rpc('get_direct_referrals_with_stats', { root_user_id: userId });

      if (error) throw error;

      return data || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π:', error);
      return [];
    }
  }

  // ============================================
  // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ============================================

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–µ—Ä–∞—Ä—Ö–∏–∏
   */
  static async getTeamByLevel(userId: string, level: number): Promise<TeamMember[]> {
    try {
      const allTeam = await this.getMyTeam(userId);
      return allTeam.filter(m => m.hierarchyLevel === level);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–æ —É—Ä–æ–≤–Ω—é:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É—Ä–æ–≤–Ω—è–º
   */
  static async getTeamStatsByLevel(userId: string): Promise<any[]> {
    try {
      const { data, error } = await supabase
        .rpc('get_team_stats_by_level', { root_user_id: userId });

      if (error) throw error;

      return data || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º:', error);
      return [];
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –≤ –∫–æ–º–∞–Ω–¥–µ
   */
  static async searchTeam(userId: string, query: string): Promise<any[]> {
    try {
      if (!query || query.trim().length < 2) {
        return [];
      }

      const { data, error } = await supabase
        .rpc('search_in_team', { 
          root_user_id: userId,
          search_query: query.trim()
        });

      if (error) throw error;

      return data || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –æ–±–æ—Ä–æ—Ç—É
   */
  static async getTopPerformers(userId: string, limit: number = 10): Promise<TeamMember[]> {
    const team = await this.getMyTeam(userId);
    
    return team
      .filter(m => m.id !== userId)
      .sort((a, b) => (b.turnover || 0) - (a.turnover || 0))
      .slice(0, limit);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserGoalInfo(userId: string): Promise<{
    currentGoal: number;
    progress: number;
    isConfirmed: boolean;
    goalDescription: string;
  }> {
    try {
      const stats = await this.getTeamStats(userId);
      
      const { data: user, error } = await supabase
        .from('users')
        .select('is_confirmed')
        .eq('id', userId)
        .single();

      const isConfirmed = user?.is_confirmed || false;
      const totalMembers = stats.totalMembers;

      let currentGoal: number;
      let goalDescription: string;

      if (totalMembers < 10) {
        currentGoal = 10;
        goalDescription = '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞';
      } else {
        currentGoal = 100;
        goalDescription = isConfirmed 
          ? '–£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–æ 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤' 
          : '–°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏';
      }

      return {
        currentGoal,
        progress: totalMembers,
        isConfirmed,
        goalDescription
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–ª–∏:', error);
      return {
        currentGoal: 10,
        progress: 0,
        isConfirmed: false,
        goalDescription: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞'
      };
    }
  }

  /**
   * –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
   */
  static async getTeamPaginated(
    userId: string,
    page: number = 1,
    pageSize: number = 50
  ): Promise<{ data: TeamMember[], total: number, totalPages: number }> {
    const allTeam = await this.getMyTeam(userId);
    const start = (page - 1) * pageSize;
    
    return {
      data: allTeam.slice(start, start + pageSize),
      total: allTeam.length,
      totalPages: Math.ceil(allTeam.length / pageSize)
    };
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
   */
  static clearCache(userId?: string): void {
    if (userId) {
      this.teamCache.delete(userId);
    } else {
      this.teamCache.clear();
    }
  }

  // ============================================
  // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
  // ============================================

  /**
   * Fallback –º–µ—Ç–æ–¥ (–µ—Å–ª–∏ RPC —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç)
   */
  private static async getTeamDirectlyOptimized(userId: string): Promise<TeamMember[]> {
    try {
      console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –º–µ—Ç–æ–¥');
      
      // –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      const { data: allUsers, error } = await supabase
        .from('users')
        .select('*')
        .order('created_at', { ascending: true });

      if (error) throw error;
      if (!allUsers) return [];

      // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ –≤ –ø–∞–º—è—Ç–∏
      const team: any[] = [];
      const visited = new Set<string>();

      const collectTeam = (currentId: string) => {
        if (visited.has(currentId)) return;
        visited.add(currentId);

        const user = allUsers.find(u => u.id === currentId);
        if (user) {
          team.push(user);

          // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π
          allUsers
            .filter(u => u.parent_id === currentId)
            .forEach(child => collectTeam(child.id));
        }
      };

      collectTeam(userId);

      return this.transformUsersToTeamMembers(team);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ fallback –º–µ—Ç–æ–¥–∞:', error);
      return [];
    }
  }

  /**
   * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ë–î –≤ TeamMember
   */
  private static async transformUsersToTeamMembers(users: any[]): Promise<TeamMember[]> {
    if (users.length === 0) return [];

    // –ü–æ–ª—É—á–∞–µ–º turnover –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    const userIds = users.map(u => u.id);
    const { data: turnoverData } = await supabase
      .from('user_turnover_current')
      .select('user_id, personal_turnover, total_turnover')
      .in('user_id', userIds);
    
    const turnoverMap = new Map(
      (turnoverData || []).map(t => [t.user_id, t])
    );

    // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ—Ç–æ–º–∫–æ–≤
    const countDescendants = (userId: string): number => {
      const children = users.filter(u => u.parent_id === userId);
      return children.reduce(
        (sum, child) => sum + 1 + countDescendants(child.id), 
        0
      );
    };

    return users.map(user => {
      const turnover = turnoverMap.get(user.id);
      return {
        id: user.id,
        parentId: user.parent_id,
        name: `${user.first_name || ''} ${user.last_name || ''}`.trim() || '–ë–µ–∑ –∏–º–µ–Ω–∏',
        avatar: user.avatar_url,
        profession: user.profession,
        role: this.mapRoleToPosition(user.role),
        position: user.profession || this.mapRoleToPosition(user.role),
        verified: user.is_confirmed || false,
        teamCount: countDescendants(user.id),
        email: user.email,
        phone: user.phone,
        turnover: turnover?.personal_turnover || 0,
        referralCode: user.referral_code,
        hierarchyLevel: user.hierarchy_level,
        hierarchyPath: user.hierarchy_path
      };
    });
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ —Ä–æ–ª–µ–π –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏
   */
  private static mapRoleToPosition(role: string | null): string {
    const roleMap: Record<string, string> = {
      admin: 'CEO',
      celebrity: 'Ambassador',
      dealer: 'Partner',
      user: 'Member',
      financier: 'Financier'
    };
    return roleMap[role || ''] || 'Member';
  }

  /**
   * –†–∞—Å—á–µ—Ç —Ü–µ–ª–∏ –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
   */
  private static calculateGoalAndStatus(totalMembers: number): { 
    goal: number; 
    shouldConfirm: boolean 
  } {
    if (totalMembers < 10) {
      return { goal: 10, shouldConfirm: false };
    } else if (totalMembers === 10) {
      return { goal: 100, shouldConfirm: true };
    } else {
      return { goal: 100, shouldConfirm: false };
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   */
  private static async confirmUserStatus(userId: string): Promise<void> {
    try {
      const { data: currentUser } = await supabase
        .from('users')
        .select('is_confirmed')
        .eq('id', userId)
        .single();

      if (currentUser?.is_confirmed) return;

      await supabase
        .from('users')
        .update({ is_confirmed: true })
        .eq('id', userId);

      console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω (10+ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
  }

  /**
   * ‚≠ê –ù–û–í–´–ô –ú–ï–¢–û–î - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (TeamStatsData)
   */
  private static getDefaultStatsData(): TeamStatsData {
    return {
      totalMembers: 0,
      directMembers: 0,
      totalTurnover: 0,
      activeMembersCount: 0,
      maxDepth: 0,
      goal: 10,
      remaining: 10
    };
  }

  /**
   * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ getDefaultStatsData()
   */
  private static getDefaultStats(): TeamStats {
    return this.getDefaultStatsData();
  }
}